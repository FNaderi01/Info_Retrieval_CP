      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/hash.h
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      166 lines (138 sloc)
    4.78 KB
      Raw
        Blame
        #ifndef HASH_H
        #define HASH_H
        #include "git-compat-util.h"
        #if defined(SHA1_PPC)
        #include "ppc/sha1.h"
        #elif defined(SHA1_APPLE)
        #include &lt;CommonCrypto/CommonDigest.h&gt;
        #elif defined(SHA1_OPENSSL)
        #include &lt;openssl/sha.h&gt;
        #elif defined(SHA1_DC)
        #include "sha1dc_git.h"
        #else /* SHA1_BLK */
        #include "block-sha1/sha1.h"
        #endif
        #if defined(SHA256_GCRYPT)
        #include "sha256/gcrypt.h"
        #elif defined(SHA256_OPENSSL)
        #include &lt;openssl/sha.h&gt;
        #else
        #include "sha256/block/sha256.h"
        #endif
        #ifndef platform_SHA_CTX
        /*
         * platform's underlying implementation of SHA-1; could be OpenSSL,
         * blk_SHA, Apple CommonCrypto, etc...  Note that the relevant
         * SHA-1 header may have already defined platform_SHA_CTX for our
         * own implementations like block-sha1 and ppc-sha1, so we list
         * the default for OpenSSL compatible SHA-1 implementations here.
         */
        #define platform_SHA_CTX	SHA_CTX
        #define platform_SHA1_Init	SHA1_Init
        #define platform_SHA1_Update	SHA1_Update
        #define platform_SHA1_Final    	SHA1_Final
        #endif
        #define git_SHA_CTX		platform_SHA_CTX
        #define git_SHA1_Init		platform_SHA1_Init
        #define git_SHA1_Update		platform_SHA1_Update
        #define git_SHA1_Final		platform_SHA1_Final
        #ifndef platform_SHA256_CTX
        #define platform_SHA256_CTX	SHA256_CTX
        #define platform_SHA256_Init	SHA256_Init
        #define platform_SHA256_Update	SHA256_Update
        #define platform_SHA256_Final	SHA256_Final
        #endif
        #define git_SHA256_CTX		platform_SHA256_CTX
        #define git_SHA256_Init		platform_SHA256_Init
        #define git_SHA256_Update	platform_SHA256_Update
        #define git_SHA256_Final	platform_SHA256_Final
        #ifdef SHA1_MAX_BLOCK_SIZE
        #include "compat/sha1-chunked.h"
        #undef git_SHA1_Update
        #define git_SHA1_Update		git_SHA1_Update_Chunked
        #endif
        /*
         * Note that these constants are suitable for indexing the hash_algos array and
         * comparing against each other, but are otherwise arbitrary, so they should not
         * be exposed to the user or serialized to disk.  To know whether a
         * git_hash_algo struct points to some usable hash function, test the format_id
         * field for being non-zero.  Use the name field for user-visible situations and
         * the format_id field for fixed-length fields on disk.
         */
        /* An unknown hash function. */
        #define GIT_HASH_UNKNOWN 0
        /* SHA-1 */
        #define GIT_HASH_SHA1 1
        /* SHA-256  */
        #define GIT_HASH_SHA256 2
        /* Number of algorithms supported (including unknown). */
        #define GIT_HASH_NALGOS (GIT_HASH_SHA256 + 1)
        /* A suitably aligned type for stack allocations of hash contexts. */
        union git_hash_ctx {
        	git_SHA_CTX sha1;
        	git_SHA256_CTX sha256;
        };
        typedef union git_hash_ctx git_hash_ctx;
        typedef void (*git_hash_init_fn)(git_hash_ctx *ctx);
        typedef void (*git_hash_update_fn)(git_hash_ctx *ctx, const void *in, size_t len);
        typedef void (*git_hash_final_fn)(unsigned char *hash, git_hash_ctx *ctx);
        struct git_hash_algo {
        	/*
        	 * The name of the algorithm, as appears in the config file and in
        	 * messages.
        	 */
        	const char *name;
        	/* A four-byte version identifier, used in pack indices. */
        	uint32_t format_id;
        	/* The length of the hash in binary. */
        	size_t rawsz;
        	/* The length of the hash in hex characters. */
        	size_t hexsz;
        	/* The block size of the hash. */
        	size_t blksz;
        	/* The hash initialization function. */
        	git_hash_init_fn init_fn;
        	/* The hash update function. */
        	git_hash_update_fn update_fn;
        	/* The hash finalization function. */
        	git_hash_final_fn final_fn;
        	/* The OID of the empty tree. */
        	const struct object_id *empty_tree;
        	/* The OID of the empty blob. */
        	const struct object_id *empty_blob;
        };
        extern const struct git_hash_algo hash_algos[GIT_HASH_NALGOS];
        /*
         * Return a GIT_HASH_* constant based on the name.  Returns GIT_HASH_UNKNOWN if
         * the name doesn't match a known algorithm.
         */
        int hash_algo_by_name(const char *name);
        /* Identical, except based on the format ID. */
        int hash_algo_by_id(uint32_t format_id);
        /* Identical, except based on the length. */
        int hash_algo_by_length(int len);
        /* Identical, except for a pointer to struct git_hash_algo. */
        static inline int hash_algo_by_ptr(const struct git_hash_algo *p)
        {
        	return p - hash_algos;
        }
        /* The length in bytes and in hex digits of an object name (SHA-1 value). */
        #define GIT_SHA1_RAWSZ 20
        #define GIT_SHA1_HEXSZ (2 * GIT_SHA1_RAWSZ)
        /* The block size of SHA-1. */
        #define GIT_SHA1_BLKSZ 64
        /* The length in bytes and in hex digits of an object name (SHA-256 value). */
        #define GIT_SHA256_RAWSZ 32
        #define GIT_SHA256_HEXSZ (2 * GIT_SHA256_RAWSZ)
        /* The block size of SHA-256. */
        #define GIT_SHA256_BLKSZ 64
        /* The length in byte and in hex digits of the largest possible hash value. */
        #define GIT_MAX_RAWSZ GIT_SHA256_RAWSZ
        #define GIT_MAX_HEXSZ GIT_SHA256_HEXSZ
        /* The largest possible block size for any supported hash. */
        #define GIT_MAX_BLKSZ GIT_SHA256_BLKSZ
        struct object_id {
        	unsigned char hash[GIT_MAX_RAWSZ];
        };
        #define the_hash_algo the_repository-&gt;hash_algo
        #endif
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
