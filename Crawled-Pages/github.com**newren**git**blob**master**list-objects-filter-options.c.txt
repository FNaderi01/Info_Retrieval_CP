      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/list-objects-filter-options.c
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      186 lines (164 sloc)
    5.01 KB
      Raw
        Blame
        #include "cache.h"
        #include "commit.h"
        #include "config.h"
        #include "revision.h"
        #include "argv-array.h"
        #include "list-objects.h"
        #include "list-objects-filter.h"
        #include "list-objects-filter-options.h"
        /*
         * Parse value of the argument to the "filter" keyword.
         * On the command line this looks like:
         *       --filter=&lt;arg&gt;
         * and in the pack protocol as:
         *       "filter" SP &lt;arg&gt;
         *
         * The filter keyword will be used by many commands.
         * See Documentation/rev-list-options.txt for allowed values for &lt;arg&gt;.
         *
         * Capture the given arg as the "filter_spec".  This can be forwarded to
         * subordinate commands when necessary (although it's better to pass it through
         * expand_list_objects_filter_spec() first).  We also "intern" the arg for the
         * convenience of the current command.
         */
        static int gently_parse_list_objects_filter(
        	struct list_objects_filter_options *filter_options,
        	const char *arg,
        	struct strbuf *errbuf)
        {
        	const char *v0;
        	if (filter_options-&gt;choice) {
        		if (errbuf) {
        			strbuf_addstr(
        				errbuf,
        				_("multiple filter-specs cannot be combined"));
        		}
        		return 1;
        	}
        	filter_options-&gt;filter_spec = strdup(arg);
        	if (!strcmp(arg, "blob:none")) {
        		filter_options-&gt;choice = LOFC_BLOB_NONE;
        		return 0;
        	} else if (skip_prefix(arg, "blob:limit=", &amp;v0)) {
        		if (git_parse_ulong(v0, &amp;filter_options-&gt;blob_limit_value)) {
        			filter_options-&gt;choice = LOFC_BLOB_LIMIT;
        			return 0;
        		}
        	} else if (skip_prefix(arg, "tree:", &amp;v0)) {
        		if (!git_parse_ulong(v0, &amp;filter_options-&gt;tree_exclude_depth)) {
        			if (errbuf) {
        				strbuf_addstr(
        					errbuf,
        					_("expected 'tree:&lt;depth&gt;'"));
        			}
        			return 1;
        		}
        		filter_options-&gt;choice = LOFC_TREE_DEPTH;
        		return 0;
        	} else if (skip_prefix(arg, "sparse:oid=", &amp;v0)) {
        		struct object_context oc;
        		struct object_id sparse_oid;
        		/*
        		 * Try to parse &lt;oid-expression&gt; into an OID for the current
        		 * command, but DO NOT complain if we don't have the blob or
        		 * ref locally.
        		 */
        		if (!get_oid_with_context(the_repository, v0, GET_OID_BLOB,
        					  &amp;sparse_oid, &amp;oc))
        			filter_options-&gt;sparse_oid_value = oiddup(&amp;sparse_oid);
        		filter_options-&gt;choice = LOFC_SPARSE_OID;
        		return 0;
        	} else if (skip_prefix(arg, "sparse:path=", &amp;v0)) {
        		if (errbuf) {
        			strbuf_addstr(
        				errbuf,
        				_("sparse:path filters support has been dropped"));
        		}
        		return 1;
        	}
        	/*
        	 * Please update _git_fetch() in git-completion.bash when you
        	 * add new filters
        	 */
        	if (errbuf)
        		strbuf_addf(errbuf, _("invalid filter-spec '%s'"), arg);
        	memset(filter_options, 0, sizeof(*filter_options));
        	return 1;
        }
        int parse_list_objects_filter(struct list_objects_filter_options *filter_options,
        			      const char *arg)
        {
        	struct strbuf buf = STRBUF_INIT;
        	if (gently_parse_list_objects_filter(filter_options, arg, &amp;buf))
        		die("%s", buf.buf);
        	return 0;
        }
        int opt_parse_list_objects_filter(const struct option *opt,
        				  const char *arg, int unset)
        {
        	struct list_objects_filter_options *filter_options = opt-&gt;value;
        	if (unset || !arg) {
        		list_objects_filter_set_no_filter(filter_options);
        		return 0;
        	}
        	return parse_list_objects_filter(filter_options, arg);
        }
        void expand_list_objects_filter_spec(
        	const struct list_objects_filter_options *filter,
        	struct strbuf *expanded_spec)
        {
        	strbuf_init(expanded_spec, strlen(filter-&gt;filter_spec));
        	if (filter-&gt;choice == LOFC_BLOB_LIMIT)
        		strbuf_addf(expanded_spec, "blob:limit=%lu",
        			    filter-&gt;blob_limit_value);
        	else if (filter-&gt;choice == LOFC_TREE_DEPTH)
        		strbuf_addf(expanded_spec, "tree:%lu",
        			    filter-&gt;tree_exclude_depth);
        	else
        		strbuf_addstr(expanded_spec, filter-&gt;filter_spec);
        }
        void list_objects_filter_release(
        	struct list_objects_filter_options *filter_options)
        {
        	free(filter_options-&gt;filter_spec);
        	free(filter_options-&gt;sparse_oid_value);
        	memset(filter_options, 0, sizeof(*filter_options));
        }
        void partial_clone_register(
        	const char *remote,
        	const struct list_objects_filter_options *filter_options)
        {
        	/*
        	 * Record the name of the partial clone remote in the
        	 * config and in the global variable -- the latter is
        	 * used throughout to indicate that partial clone is
        	 * enabled and to expect missing objects.
        	 */
        	if (repository_format_partial_clone &amp;&amp;
        	    *repository_format_partial_clone &amp;&amp;
        	    strcmp(remote, repository_format_partial_clone))
        		die(_("cannot change partial clone promisor remote"));
        	git_config_set("core.repositoryformatversion", "1");
        	git_config_set("extensions.partialclone", remote);
        	repository_format_partial_clone = xstrdup(remote);
        	/*
        	 * Record the initial filter-spec in the config as
        	 * the default for subsequent fetches from this remote.
        	 */
        	core_partial_clone_filter_default =
        		xstrdup(filter_options-&gt;filter_spec);
        	git_config_set("core.partialclonefilter",
        		       core_partial_clone_filter_default);
        }
        void partial_clone_get_default_filter_spec(
        	struct list_objects_filter_options *filter_options)
        {
        	/*
        	 * Parse default value, but silently ignore it if it is invalid.
        	 */
        	if (!core_partial_clone_filter_default)
        		return;
        	gently_parse_list_objects_filter(filter_options,
        					 core_partial_clone_filter_default,
        					 NULL);
        }
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
