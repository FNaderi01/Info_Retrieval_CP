     category > maptopic > article -->
    GitHub Docs
    All products
  REST API
          Overview
          Resources in the REST API
          Media types
          Other authentication methods
          Troubleshooting
          API previews
          Libraries
          Endpoints available for GitHub Apps
          Reference
          Activity
          Apps
          Checks
          Codes of conduct
          Emojis
          GitHub Enterprise administration
          Gists
          Git database
          Gitignore
          Issues
          Licenses
          Markdown
          Meta
          OAuth Authorizations
          Organizations
          Projects
          Pulls
          Rate limit
          Reactions
          Repositories
          Search
          Teams
          Users
          Permissions required for GitHub Apps
          Guides
          Getting started with the REST API
          Basics of authentication
          Discovering resources for a user
          Delivering deployments
          Rendering data as graphs
          Working with comments
          Traversing with pagination
          Building a CI server
          Best practices for integrators
          Getting started with the Git Database API
          Getting started with the Checks API
        GitHub Docs
                Explore by product
                      REST API
                       GitHub.com
                       Enterprise Administrators
                       GitHub Actions
                       GitHub Packages
                       Developers
                       REST API
                       GraphQL API
                       GitHub Insights
                       GitHub Desktop
                       Atom
                       Electron
                            English
                              English
                              简体中文 (Simplified Chinese)
                              日本語 (Japanese)
                              Español (Spanish)
                              Português do Brasil (Portuguese)
          This version of GitHub Enterprise will be discontinued on
          This version of GitHub Enterprise was discontinued on
        2020-11-12.
      No patch releases will be made, even for critical security issues. For better performance, improved security, and new features, upgrade to the latest version of GitHub Enterprise.
For help with the upgrade, contact GitHub Enterprise support.
      Article version: Enterprise Server 2.19
      Free, Pro, and Team
      Enterprise Server 2.22
      Enterprise Server 2.21
      Enterprise Server 2.20
      Enterprise Server 2.19
    REST API
    Guides
    Getting started with the REST API
      Article version: Enterprise Server 2.19
      Free, Pro, and Team
      Enterprise Server 2.22
      Enterprise Server 2.21
      Enterprise Server 2.20
      Enterprise Server 2.19
        Getting started with the REST API
        Learn the foundations for using the REST API, starting with authentication and some endpoint examples.
        In this article
          Overview
          Authentication
          Repositories
          Issues
          Conditional requests
    Did this doc help you?
    Want to learn about new docs features and updates? Sign up for updates!
    We're continually improving our docs. We'd love to hear how we can do better.
      What problem did you have?
        Required
        Choose an option
        Information was unclear
        The content was confusing
        The article didn't answer my question
        Other
      Let us know what we can do better
        Optional
      Can we contact you if we have more questions?
        Optional
      Send
    Thank you! Your feedback has been submitted.
  Help us make these docs great!
  All GitHub docs are open source. See something that's wrong or unclear? Submit a pull request.
    Make a contribution
  Or, learn how to contribute.
      Let's walk through core API concepts as we tackle some everyday use cases.
Overview
Most applications will use an existing wrapper library in the language
of your choice, but it's important to familiarize yourself with the underlying API
HTTP methods first.
There's no easier way to kick the tires than through cURL.
Hello World
Let's start by testing our setup. Open up a command prompt and enter the
following command:
$ curl http(s)://[hostname]/api/v3/zen
&gt; Keep it logically awesome.
The response will be a random selection from our design philosophies.
Next, let's GET Chris Wanstrath's GitHub profile:
# GET /users/defunkt
$ curl http(s)://[hostname]/api/v3/users/defunkt
&gt; {
&gt;   "login": "defunkt",
&gt;   "id": 2,
&gt;   "url": "http(s)://[hostname]/api/v3/users/defunkt",
&gt;   "html_url": "https://github.com/defunkt",
&gt;   ...
&gt; }
Mmmmm, tastes like JSON. Let's add the -i flag to include headers:
$ curl -i http(s)://[hostname]/api/v3/users/defunkt
&gt; HTTP/1.1 200 OK
&gt; Server: GitHub.com
&gt; Date: Sun, 11 Nov 2012 18:43:28 GMT
&gt; Content-Type: application/json; charset=utf-8
&gt; Status: 200 OK
&gt; ETag: "bfd85cbf23ac0b0c8a29bee02e7117c6"
&gt; X-RateLimit-Limit: 60
&gt; X-RateLimit-Remaining: 57
&gt; X-RateLimit-Reset: 1352660008
&gt; X-GitHub-Media-Type: github.v3
&gt; Vary: Accept
&gt; Cache-Control: public, max-age=60, s-maxage=60
&gt; X-Content-Type-Options: nosniff
&gt; Content-Length: 692
&gt; Last-Modified: Tue, 30 Oct 2012 18:58:42 GMT
&gt; {
&gt;   "login": "defunkt",
&gt;   "id": 2,
&gt;   "url": "http(s)://[hostname]/api/v3/users/defunkt",
&gt;   "html_url": "https://github.com/defunkt",
&gt;   ...
&gt; }
There are a few interesting bits in the response headers. As expected, the
Content-Type is application/json.
Any headers beginning with X- are custom headers, and are not included in the
HTTP spec. For example:
X-GitHub-Media-Type has a value of github.v3. This lets us know the media type
for the response. Media types have helped us version our output in API v3. We'll
talk more about that later.
Take note of the X-RateLimit-Limit and X-RateLimit-Remaining headers. This
pair of headers indicate how many requests a client can make in
a rolling time period (typically an hour) and how many of those requests the
client has already spent.
Authentication
Unauthenticated clients can make 60 requests per hour. To get more requests per hour, we'll need to
authenticate. In fact, doing anything interesting with the GitHub Enterprise API requires
authentication.
Using personal access tokens
The easiest and best way to authenticate with the GitHub Enterprise API is by using Basic Authentication via OAuth tokens. OAuth tokens include personal access tokens.
Use a -u flag to set your username:
$ curl -i -u your_username http(s)://[hostname]/api/v3/users/octocat
When prompted, you can enter your OAuth token, but we recommend you set up a variable for it:
You can use -u "username:$token" and set up a variable for token to avoid leaving your token in shell history, which should be avoided.
$ curl -i -u username:$token http(s)://[hostname]/api/v3/users/octocat
When authenticating, you should see your rate limit bumped to 5,000 requests an hour, as indicated in the X-RateLimit-Limit header. In addition to providing more calls per hour, authentication enables you to read and write private information using the API.
You can easily create a personal access token using your Personal access tokens settings page:
Get your own user profile
When properly authenticated, you can take advantage of the permissions
associated with your GitHub Enterprise account. For example, try getting
your own user profile:
$ curl -i -u your_username:your_token http(s)://[hostname]/api/v3/user
&gt; {
&gt;   ...
&gt;   "plan": {
&gt;     "space": 2516582,
&gt;    "collaborators": 10,
&gt;    "private_repos": 20,
&gt;    "name": "medium"
&gt;  }
&gt;   ...
&gt; }
This time, in addition to the same set of public information we
retrieved for @defunkt earlier, you should also see the non-public
information for your user profile. For example, you'll see a plan object
in the response which gives details about the GitHub Enterprise plan for the account.
Using OAuth tokens for apps
Apps that need to read or write private information using the API on behalf of another user should use OAuth.
OAuth uses tokens. Tokens provide two big features:
Revokable access: users can revoke authorization to third party apps at any time
Limited access: users can review the specific access that a token
will provide before authorizing a third party app
Tokens should be created via a web flow. An application
sends users to GitHub Enterprise to log in. GitHub Enterprise then presents a dialog
indicating the name of the app, as well as the level of access the app
has once it's authorized by the user. After a user authorizes access, GitHub Enterprise
redirects the user back to the application:
Treat OAuth tokens like passwords! Don't share them with other users or store
them in insecure places. The tokens in these examples are fake and the names have
been changed to protect the innocent.
Now that we've got the hang of making authenticated calls, let's move along to
the Repositories API.
Repositories
Almost any meaningful use of the GitHub Enterprise API will involve some level of Repository
information. We can GET repository details in the same way we fetched user
details earlier:
$ curl -i http(s)://[hostname]/api/v3/repos/twbs/bootstrap
In the same way, we can view repositories for the authenticated user:
$ curl -i -H "Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4" \
    http(s)://[hostname]/api/v3/user/repos
Or, we can list repositories for another user:
$ curl -i http(s)://[hostname]/api/v3/users/octocat/repos
Or, we can list repositories for an organization:
$ curl -i http(s)://[hostname]/api/v3/orgs/octo-org/repos
The information returned from these calls will depend on which scopes our token has when we authenticate:
A token with public_repo scope returns a response that includes all public repositories we have access to see on github.com.
A token with repo scope returns a response that includes all public and private repositories we have access to see on github.com.
As the docs indicate, these methods take a type parameter that
can filter the repositories returned based on what type of access the user has
for the repository. In this way, we can fetch only directly-owned repositories,
organization repositories, or repositories the user collaborates on via a team.
$ curl -i "http(s)://[hostname]/api/v3/users/octocat/repos?type=owner"
In this example, we grab only those repositories that octocat owns, not the
ones on which she collaborates. Note the quoted URL above. Depending on your
shell setup, cURL sometimes requires a quoted URL or else it ignores the
query string.
Create a repository
Fetching information for existing repositories is a common use case, but the
GitHub Enterprise API supports creating new repositories as well. To create a repository,
we need to POST some JSON containing the details and configuration options.
$ curl -i -H "Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4" \
    -d '{ \
        "name": "blog", \
        "auto_init": true, \
        "private": true, \
        "gitignore_template": "nanoc" \
      }' \
    http(s)://[hostname]/api/v3/user/repos
In this minimal example, we create a new repository for our blog (to be served
on GitHub Pages, perhaps). Though the blog will be public, we've made
the repository private. In this single step, we'll also initialize it with
a README and a nanoc-flavored .gitignore template.
The resulting repository will be found at https://github.com/&lt;your_username&gt;/blog.
To create a repository under an organization for which you're
an owner, just change the API method from /user/repos to /orgs/&lt;org_name&gt;/repos.
Next, let's fetch our newly created repository:
$ curl -i http(s)://[hostname]/api/v3/repos/pengwynn/blog
&gt; HTTP/1.1 404 Not Found
&gt; {
&gt;    "message": "Not Found"
&gt; }
Oh noes! Where did it go? Since we created the repository as private, we need
to authenticate in order to see it. If you're a grizzled HTTP user, you might
expect a 403 instead. Since we don't want to leak information about private
repositories, the GitHub Enterprise API returns a 404 in this case, as if to say "we can
neither confirm nor deny the existence of this repository."
Issues
The UI for Issues on GitHub Enterprise aims to provide 'just enough' workflow while
staying out of your way. With the GitHub Enterprise Issues API, you can pull
data out or create issues from other tools to create a workflow that works for
your team.
Just like github.com, the API provides a few methods to view issues for the
authenticated user. To see all your issues, call GET /issues:
$ curl -i -H "Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4" \
    http(s)://[hostname]/api/v3/issues
To get only the issues under one of your GitHub Enterprise organizations, call GET /orgs/&lt;org&gt;/issues:
$ curl -i -H "Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4" \
    http(s)://[hostname]/api/v3/orgs/rails/issues
We can also get all the issues under a single repository:
$ curl -i http(s)://[hostname]/api/v3/repos/rails/rails/issues
Pagination
A project the size of Rails has thousands of issues. We'll need to paginate,
making multiple API calls to get the data. Let's repeat that last call, this
time taking note of the response headers:
$ curl -i http(s)://[hostname]/api/v3/repos/rails/rails/issues
&gt; HTTP/1.1 200 OK
&gt; ...
&gt; Link: &lt;http(s)://[hostname]/api/v3/repositories/8514/issues?page=2&gt;; rel="next", &lt;http(s)://[hostname]/api/v3/repositories/8514/issues?page=30&gt;; rel="last"
&gt; ...
The Link header provides a way for a response to link to
external resources, in this case additional pages of data. Since our call found
more than thirty issues (the default page size), the API tells us where we can
find the next page and the last page of results.
Creating an issue
Now that we've seen how to paginate lists of issues, let's create an issue from
the API.
To create an issue, we need to be authenticated, so we'll pass an
OAuth token in the header. Also, we'll pass the title, body, and labels in the JSON
body to the /issues path underneath the repository in which we want to create
the issue:
$ curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \
$    -d '{ \
$         "title": "New logo", \
$         "body": "We should have one", \
$         "labels": ["design"] \
$       }' \
$    http(s)://[hostname]/api/v3/repos/pengwynn/api-sandbox/issues
&gt; HTTP/1.1 201 Created
&gt; Location: http(s)://[hostname]/api/v3/repos/pengwynn/api-sandbox/issues/17
&gt; X-RateLimit-Limit: 5000
&gt; {
&gt;   "pull_request": {
&gt;     "patch_url": null,
&gt;     "html_url": null,
&gt;     "diff_url": null
&gt;   },
&gt;   "created_at": "2012-11-14T15:25:33Z",
&gt;   "comments": 0,
&gt;   "milestone": null,
&gt;   "title": "New logo",
&gt;   "body": "We should have one",
&gt;   "user": {
&gt;     "login": "pengwynn",
&gt;     "gravatar_id": "7e19cd5486b5d6dc1ef90e671ba52ae0",
&gt;     "avatar_url": "https://secure.gravatar.com/avatar/7e19cd5486b5d6dc1ef90e671ba52ae0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
&gt;     "id": 865,
&gt;     "url": "http(s)://[hostname]/api/v3/users/pengwynn"
&gt;   },
&gt;   "closed_at": null,
&gt;   "updated_at": "2012-11-14T15:25:33Z",
&gt;   "number": 17,
&gt;   "closed_by": null,
&gt;   "html_url": "https://github.com/pengwynn/api-sandbox/issues/17",
&gt;   "labels": [
&gt;     {
&gt;       "color": "ededed",
&gt;       "name": "design",
&gt;       "url": "http(s)://[hostname]/api/v3/repos/pengwynn/api-sandbox/labels/design"
&gt;     }
&gt;   ],
&gt;   "id": 8356941,
&gt;   "assignee": null,
&gt;   "state": "open",
&gt;   "url": "http(s)://[hostname]/api/v3/repos/pengwynn/api-sandbox/issues/17"
&gt; }
The response gives us a couple of pointers to the newly created issue, both in
the Location response header and the url field of the JSON response.
Conditional requests
A big part of being a good API citizen is respecting rate limits by caching information that hasn't changed. The API supports conditional
requests and helps you do the right thing. Consider the
first call we made to get defunkt's profile:
$ curl -i http(s)://[hostname]/api/v3/users/defunkt
&gt; HTTP/1.1 200 OK
&gt; ETag: "bfd85cbf23ac0b0c8a29bee02e7117c6"
In addition to the JSON body, take note of the HTTP status code of 200 and
the ETag header.
The ETag is a fingerprint of the response. If we pass that on subsequent calls,
we can tell the API to give us the resource again, only if it has changed:
$ curl -i -H 'If-None-Match: "bfd85cbf23ac0b0c8a29bee02e7117c6"' \
$    http(s)://[hostname]/api/v3/users/defunkt
&gt; HTTP/1.1 304 Not Modified
The 304 status indicates that the resource hasn't changed since the last time
we asked for it and the response will contain no body. As a bonus, 304 responses don't count against your rate limit.
Woot! Now you know the basics of the GitHub Enterprise API!
Basic &amp; OAuth authentication
Fetching and creating repositories and issues
Conditional requests
Keep learning with the next API guide Basics of Authentication!
    Did this doc help you?
    Want to learn about new docs features and updates? Sign up for updates!
    We're continually improving our docs. We'd love to hear how we can do better.
      What problem did you have?
        Required
        Choose an option
        Information was unclear
        The content was confusing
        The article didn't answer my question
        Other
      Let us know what we can do better
        Optional
      Can we contact you if we have more questions?
        Optional
      Send
    Thank you! Your feedback has been submitted.
  Help us make these docs great!
  All GitHub docs are open source. See something that's wrong or unclear? Submit a pull request.
    Make a contribution
  Or, learn how to contribute.
      Still need help?
      Ask the GitHub community
      Contact support
        Product
          Features
          Security
          Enterprise
          Case Studies
          Pricing
          Resources
        Platform
          Developer API
          Partners
          Atom
          Electron
          GitHub Desktop
        Support
          Help
          Community Forum
          Training
          Status
          Contact GitHub
        Company
          About
          Blog
          Careers
          Press
          Shop
        © 2020 GitHub, Inc.
        Terms 
        Privacy 
