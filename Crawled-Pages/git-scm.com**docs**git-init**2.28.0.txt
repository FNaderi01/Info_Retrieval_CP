        About
            Branching and Merging
            Small and Fast
            Distributed
            Data Assurance
            Staging Area
            Free and Open Source
            Trademark
        Documentation
            Reference
            Book
            Videos
            External Links
        Downloads
            GUI Clients
            Logos
        Community
  English ▾
  Localized versions of git-init manual
        Deutsch
        English
        Français
        Português (Brasil)
        简体中文
    Want to read in your language or fix typos? You can help translate this page.
    Topics ▾
      Setup and Config
  git
  config
  help
  bugreport
      Getting and Creating Projects
  init
  clone
      Basic Snapshotting
  add
  status
  diff
  commit
  notes
  restore
  reset
  rm
  mv
      Branching and Merging
  branch
  checkout
  switch
  merge
  mergetool
  log
  stash
  tag
  worktree
      Sharing and Updating Projects
  fetch
  pull
  push
  remote
  submodule
      Inspection and Comparison
  show
  log
  diff
  difftool
  range-diff
  shortlog
  describe
      Patching
  apply
  cherry-pick
  diff
  rebase
  revert
      Debugging
  bisect
  blame
  grep
      Email
  am
  apply
  format-patch
  send-email
  request-pull
      External Systems
  svn
  fast-import
      Server Admin
  daemon
  update-server-info
      Guides
  gitattributes
  Command-line interface conventions
  Everyday Git
  Frequently Asked Questions (FAQ)
  Glossary
  githooks
  gitignore
  gitmodules
  Revisions
  Submodules
  Tutorial
  Workflows
      Administration
  clean
  gc
  fsck
  reflog
  filter-branch
  instaweb
  archive
  bundle
      Plumbing Commands
  cat-file
  check-ignore
  checkout-index
  commit-tree
  count-objects
  diff-index
  for-each-ref
  hash-object
  ls-files
  ls-tree
  merge-base
  read-tree
  rev-list
  rev-parse
  show-ref
  symbolic-ref
  update-index
  update-ref
  verify-pack
  write-tree
    Version 2.28.0
 ▾ 
git-init last updated in 2.28.0
  Changes in the git-init manual
        2.28.0
          07/27/20
        2.27.0
          06/01/20
        2.21.1 → 2.26.2 no changes
        2.21.0
          02/24/19
        2.13.7 → 2.20.4 no changes
        2.12.5
          09/22/17
        2.10.5 → 2.11.4 no changes
        2.9.5
          07/30/17
        2.5.6 → 2.8.6 no changes
        2.4.12
          05/05/17
        2.3.10 no changes
        2.2.3
          09/04/15
    See more previous releases → -->
    Check your version of git by running
    $
NAME
git-init - Create an empty Git repository or reinitialize an existing one
SYNOPSIS
git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]
	  [--separate-git-dir &lt;git dir&gt;] [--object-format=&lt;format&gt;]
	  [-b &lt;branch-name&gt; | --initial-branch=&lt;branch-name&gt;]
	  [--shared[=&lt;permissions&gt;]] [directory]
DESCRIPTION
This command creates an empty Git repository - basically a .git
directory with subdirectories for objects, refs/heads,
refs/tags, and template files.  An initial HEAD file that
references the HEAD of the master branch is also created.
If the $GIT_DIR environment variable is set then it specifies a path
to use instead of ./.git for the base of the repository.
If the object storage directory is specified via the
$GIT_OBJECT_DIRECTORY environment variable then the sha1 directories
are created underneath - otherwise the default $GIT_DIR/objects
directory is used.
Running git init in an existing repository is safe. It will not
overwrite things that are already there. The primary reason for
rerunning git init is to pick up newly added templates (or to move
the repository to another place if --separate-git-dir is given).
OPTIONS
 -q 
 --quiet 
Only print error and warning messages; all other output will be suppressed.
 --bare 
Create a bare repository. If GIT_DIR environment is not set, it is set to the
current working directory.
 --object-format=&lt;format&gt; 
Specify the given object format (hash algorithm) for the repository.  The valid
values are sha1 and (if enabled) sha256.  sha1 is the default.
 --template=&lt;template_directory&gt; 
Specify the directory from which templates will be used.  (See the "TEMPLATE
DIRECTORY" section below.)
 --separate-git-dir=&lt;git dir&gt; 
Instead of initializing the repository as a directory to either $GIT_DIR or
./.git/, create a text file there containing the path to the actual
repository.  This file acts as filesystem-agnostic Git symbolic link to the
repository.
If this is reinitialization, the repository will be moved to the specified path.
 -b &lt;branch-name 
 --initial-branch=&lt;branch-name&gt; 
Use the specified name for the initial branch in the newly created repository.
If not specified, fall back to the default name: master.
 --shared[=(false|true|umask|group|all|world|everybody|0xxx)] 
Specify that the Git repository is to be shared amongst several users.  This
allows users belonging to the same group to push into that
repository.  When specified, the config variable "core.sharedRepository" is
set so that files and directories under $GIT_DIR are created with the
requested permissions.  When not specified, Git will use permissions reported
by umask(2).
The option can have the following values, defaulting to group if no value
is given:
 umask (or false) 
Use permissions reported by umask(2). The default, when --shared is not
specified.
 group (or true) 
Make the repository group-writable, (and g+sx, since the git group may be not
the primary group of all users). This is used to loosen the permissions of an
otherwise safe umask(2) value. Note that the umask still applies to the other
permission bits (e.g. if umask is 0022, using group will not remove read
privileges from other (non-group) users). See 0xxx for how to exactly specify
the repository permissions.
 all (or world or everybody) 
Same as group, but make the repository readable by all users.
 0xxx 
0xxx is an octal number and each file will have mode 0xxx. 0xxx will
override users' umask(2) value (and not only loosen permissions as group and
all does). 0640 will create a repository which is group-readable, but not
group-writable or accessible to others. 0660 will create a repo that is
readable and writable to the current user and group, but inaccessible to others.
By default, the configuration flag receive.denyNonFastForwards is enabled
in shared repositories, so that you cannot force a non fast-forwarding push
into it.
If you provide a directory, the command is run inside it. If this directory
does not exist, it will be created.
TEMPLATE DIRECTORY
Files and directories in the template directory whose name do not start with a
dot will be copied to the $GIT_DIR after it is created.
The template directory will be one of the following (in order):
the argument given with the --template option;
the contents of the $GIT_TEMPLATE_DIR environment variable;
the init.templateDir configuration variable; or
the default template directory: /usr/share/git-core/templates.
The default template directory includes some directory structure, suggested
"exclude patterns" (see gitignore[5]), and sample hook files.
The sample hooks are all disabled by default. To enable one of the
sample hooks rename it by removing its .sample suffix.
See githooks[5] for more general info on hook execution.
EXAMPLES
 Start a new Git repository for an existing code base 
$ cd /path/to/my/codebase
$ git init      (1)
$ git add .     (2)
$ git commit    (3)
Create a /path/to/my/codebase/.git directory.
Add all existing files to the index.
Record the pristine state as the first commit in the history.
GIT
Part of the git[1] suite
    About this site
    Patches, suggestions, and comments are welcome.
    Git is a member of Software Freedom Conservancy
