        About
            Branching and Merging
            Small and Fast
            Distributed
            Data Assurance
            Staging Area
            Free and Open Source
            Trademark
        Documentation
            Reference
            Book
            Videos
            External Links
        Downloads
            GUI Clients
            Logos
        Community
This book is available in
  English.
  Full translation available in
    български език,
    Deutsch,
    Español,
    Français,
    Ελληνικά,
    日本語,
    한국어,
    Nederlands,
    Русский,
    Slovenščina,
    Tagalog,
    Українська
    简体中文,
  Partial translations available in
    Čeština,
    Македонски,
    Polski,
    Српски,
    Ўзбекча,
    繁體中文,
  Translations started for
    azərbaycan dili,
    Беларуская,
    فارسی,
    Indonesian,
    Italiano,
    Bahasa Melayu,
    Português (Brasil),
    Português (Portugal),
    Svenska,
    Türkçe.
The source of this book is  hosted on GitHub.
Patches, suggestions and comments are welcome.
  Chapters ▾
  1. 시작하기
          1.1
          버전 관리란? 
          1.2
          짧게 보는 Git의 역사 
          1.3
          Git 기초 
          1.4
          CLI 
          1.5
          Git 설치 
          1.6
          Git 최초 설정 
          1.7
          도움말 보기 
          1.8
          요약 
  2. Git의 기초
          2.1
          Git 저장소 만들기 
          2.2
          수정하고 저장소에 저장하기 
          2.3
          커밋 히스토리 조회하기 
          2.4
          되돌리기 
          2.5
          리모트 저장소 
          2.6
          태그 
          2.7
          Git Alias 
          2.8
          요약 
  3. Git 브랜치
          3.1
          브랜치란 무엇인가 
          3.2
          브랜치와 Merge 의 기초 
          3.3
          브랜치 관리 
          3.4
          브랜치 워크플로 
          3.5
          리모트 브랜치 
          3.6
          Rebase 하기 
          3.7
          요약 
  4. Git 서버
          4.1
          프로토콜 
          4.2
          서버에 Git 설치하기 
          4.3
          SSH 공개키 만들기 
          4.4
          서버 설정하기 
          4.5
          Git 데몬 
          4.6
          스마트 HTTP 
          4.7
          GitWeb 
          4.8
          GitLab 
          4.9
          또 다른 선택지, 호스팅 
          4.10
          요약 
  5. 분산 환경에서의 Git
          5.1
          분산 환경에서의 워크플로 
          5.2
          프로젝트에 기여하기 
          5.3
          프로젝트 관리하기 
          5.4
          요약 
  6. GitHub
          6.1
          계정 만들고 설정하기 
          6.2
          GitHub 프로젝트에 기여하기 
          6.3
          GitHub 프로젝트 관리하기 
          6.4
          Organization 관리하기 
          6.5
          GitHub 스크립팅 
          6.6
          요약 
  7. Git 도구
          7.1
          리비전 조회하기 
          7.2
          대화형 명령 
          7.3
          Stashing과 Cleaning 
          7.4
          내 작업에 서명하기 
          7.5
          검색 
          7.6
          히스토리 단장하기 
          7.7
          Reset 명확히 알고 가기 
          7.8
          고급 Merge 
          7.9
          Rerere 
          7.10
          Git으로 버그 찾기 
          7.11
          서브모듈 
          7.12
          Bundle 
          7.13
          Replace 
          7.14
          Credential 저장소 
          7.15
          요약 
  8. Git맞춤
          8.1
          Git 설정하기 
          8.2
          Git Attributes 
          8.3
          Git Hooks 
          8.4
          정책 구현하기 
          8.5
          요약 
  9. Git과 여타 버전 관리 시스템
          9.1
          Git: 범용 Client 
          9.2
          Git으로 옮기기 
          9.3
          요약 
  10. Git의 내부
          10.1
          Plumbing 명령과 Porcelain 명령 
          10.2
          Git 개체 
          10.3
          Git Refs 
          10.4
          Packfile 
          10.5
          Refspec 
          10.6
          데이터 전송 프로토콜 
          10.7
          운영 및 데이터 복구 
          10.8
          환경변수 
          10.9
          요약 
  A1. Appendix A: 다양한 환경에서 Git 사용하기
          A1.1
          GUI 
          A1.2
          Visual Studio 
          A1.3
          Eclipse 
          A1.4
          Bash 
          A1.5
          Zsh 
          A1.6
          Git in Powershell 
          A1.7
          요약 
  A2. Appendix B: 애플리케이션에 Git 넣기
          A2.1
          Git 명령어 
          A2.2
          Libgit2 
          A2.3
          JGit 
          A2.4
          go-git 
  A3. Appendix C: Git 명령어
          A3.1
          설치와 설정 
          A3.2
          프로젝트 가져오기와 생성하기 
          A3.3
          스냅샷 다루기 
          A3.4
          Branch와 Merge 
          A3.5
          공유하고 업데이트하기 
          A3.6
          보기와 비교 
          A3.7
          Debugging 
          A3.8
          Patch 하기 
          A3.9
          Email 
          A3.10
          다른 버전 관리 시스템 
          A3.11
          관리 
          A3.12
          Plumbing 명령어 
      2nd Edition
    8.4 Git맞춤 - 정책 구현하기
정책 구현하기
지금까지 배운 것을 한 번 적용해보자. 나름의 커밋 메시지 규칙으로 검사하고 Fast-forward Push 만 허용하고 디렉토리마다 사용자의 수정 권한을 제어하는 워크플로를 만든다.
실질적으로 정책을 강제하려면 서버 훅으로 만들어야 한다. 하지만, 개발자들이 Push 할 수 없는 커밋은 아예 만들지 않도록 클라이언트 훅도 만든다.
훅 스크립트는 Ruby 언어를 사용한다. 필자가 주로 사용하는 언어기도 하지만 코드가 쉬워서 직접 작성하는 것은 어렵더라도 코드를 읽고 개념을 이해할 수 있을 것이다.
물론 Git은 언어를 가리지 않는다. Git이 자동으로 생성해주는 예제는 모두 Perl과 Bash로 작성돼 있다. 예제를 열어 보면 Perl과 Bash로 작성된 예제를 참고 할 수 있다.
서버 훅
서버 정책은 전부 update 훅으로 만든다.
이 스크립트는 브랜치가 Push 될 때마다 한 번 실행되고 아래 내용을 아규먼트로 받는다.
해당 브랜치의 이름
원래 브랜치가 가리키던 Refs
새로 Push 된 Refs
그리고 SSH를 통해서 Push 하는 것이라면 누가 Push 하는 지도 알 수 있다.
SSH로 접근하긴 하지만 공개키를 이용하여 개발자 모두 계정 하나로(“git” 같은) Push 하고 있다면 실제로 Push 하는 사람이 누구인지 공개키를 비교하여 판별하고 환경변수를 설정해주는 스크립트가 필요하다.
아래 스크립트에서는 $USER 환경 변수에 현재 접속한 사용자 정보가 있다고 가정하며 update 스크립트는 필요한 정보를 수집하는 것으로 시작한다.
#!/usr/bin/env ruby
$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']
puts "Enforcing Policies..."
puts "(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"
스크립트에서 전역변수를 쓰고 있지만
데모의 이해를 돕기 위해서니 너무 나무라지는 마시길 바란다.
커밋 메시지 규칙 만들기
커밋 메시지 규칙부터 해보자.
일단 목표가 있어야 하니까 커밋 메시지에 “ref: 1234” 같은 스트링이 포함돼 있어야 한다고 가정하자. 보통 커밋은 이슈 트래커에 있는 이슈와 관련돼 있으니 그 이슈가 뭔지 커밋 메시지에 적어 놓으면 좋다.
Push 할 때마다 커밋 메시지에 해당 스트링이 포함돼 있는지 확인한다. 만약 커밋 메시지에 해당 스트링이 없는 커밋이면 0이 아닌 값을 반환해서 Push를 거절한다.
$newrev, $oldrev 변수와 git rev-list 라는 Plumbing 명령어를 이용해서 Push 하는 모든 커밋의 SHA-1 값을 알 수 있다.
git log 와 근본적으로 같은 명령이고 옵션을 하나도 주지 않으면 다른 정보 없이 SHA-1 값만 보여준다.
이 명령으로 두 커밋 사이에 있는 커밋들의 SHA-1 값을 살펴보고자 아래와 같은 명령을 사용할 수 있다.
$ git rev-list 538c33..d14fc7
d14fc7c847ab946ec39590d87783c69b031bdfb7
9f585da4401b0a3999e84113824d15245c13f0be
234071a1be950e2a8d078e6141f5cd20c1e61ad3
dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475
이 SHA-1 값으로 각 커밋의 메시지도 가져온다. 커밋 메시지를 가져와서 정규표현 식으로 해당 패턴이 있는지 검사한다.
커밋 메시지를 얻는 방법을 알아보자.
커밋의 raw 데이터는 git cat-file 이라는 Plumbing 명령어로 얻을 수 있다.
Git의 내부 에서 Plumbing 명령어에 대해 자세히 다루니까 지금은 커밋 메시지 얻는 것에 집중하자.
$ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon &lt;schacon@gmail.com&gt; 1205815931 -0700
committer Scott Chacon &lt;schacon@gmail.com&gt; 1240030591 -0700
changed the version number
이 명령이 출력하는 메시지에서 커밋 메시지만 잘라내야 한다.
첫 번째 빈 라인 다음부터가 커밋 메시지니까 유닉스 명령어 sed 로 첫 빈 라인 이후를 잘라낸다.
$ git cat-file commit ca82a6 | sed '1,/^$/d'
changed the version number
이제 커밋 메시지에서 찾는 패턴과 일치하는 문자열이 있는지 검사해서 있으면 통과시키고 없으면 거절한다.
스크립트가 종료할 때 0이 아닌 값을 반환하면 Push가 거절된다.
이 일을 하는 코드는 아래와 같다.
$regex = /\[ref: (\d+)\]/
# enforced custom commit message format
def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
      puts "[POLICY] Your message is not formatted correctly"
      exit 1
    end
  end
end
check_message_format
이 코드를 update 스크립트로 넣으면 규칙을 어긴 커밋은 Push 할 수 없다.
ACL로 사용자마다 다른 규칙 적용하기
진행하는 프로젝트에 모듈이 여러 개라서 모듈마다 특정 사용자들만 Push 할 수 있게 ACL(Access Control List)을 설정해야 한다고 가정하자.
모든 권한을 다 가진 사람들도 있고 특정 디렉토리나 파일만 Push 할 수 있는 사람도 있다.
이런 일을 강제하려면 먼저 서버의 Bare 저장소에 acl 이라는 파일을 만들고 거기에 규칙을 기술한다.
그리고 update 훅에서 Push 하는 파일이 무엇인지 확인하고 ACL과 비교해서 Push 할 수 있는지 없는지 결정한다.
우선 ACL부터 작성한다.
CVS에서 사용하는 것과 비슷한 ACL을 만든다. 규칙은 한 라인에 하나씩 기술한다. 각 라인의 첫 번째 필드는 avail 이나 unavail 이고 두 번째 필드는 규칙을 적용할 사용자들의 목록을 CSV(Comma-Separated Values) 형식으로 적는다. 마지막 필드엔 규칙을 적용할 경로를 적는다. 만약 마지막 필드가 비워져 있으면 모든 경로를 의미한다.
이 필드는 파이프(|) 문자로 구분한다.
예를 하나 들어보자. 어떤 모듈의 모든 권한을 가지는 관리자도 여러 명이고 doc 디렉토리만 접근해서 문서를 만드는 사람도 여러 명이다. 하지만 lib 과 tests 디렉토리에 접근하는 사람은 한 명이다. 이런 상황을 ACL로 만들면 아래와 같다.
avail|nickh,pjhyett,defunkt,tpw
avail|usinclair,cdickens,ebronte|doc
avail|schacon|lib
avail|schacon|tests
이 ACL 정보는 스크립트에서 읽어 사용한다.
설명을 쉽게 하고자 여기서는 avail 만 처리한다.
아래의 메소드는 Associative Array를 반환하는데, 키는 사용자이름이고 값은 사용자가 Push 할 수 있는 경로의 목록이다.
def get_acl_access_data(acl_file)
  # read in ACL data
  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
  access = {}
  acl_file.each do |line|
    avail, users, path = line.split('|')
    next unless avail == 'avail'
    users.split(',').each do |user|
      access[user] ||= []
      access[user] &lt;&lt; path
    end
  end
  access
end
이 get_acl_access_data 함수가 앞의 ACL 파일을 읽고 반환하는 결과는 아래와 같다.
{"defunkt"=&gt;[nil],
 "tpw"=&gt;[nil],
 "nickh"=&gt;[nil],
 "pjhyett"=&gt;[nil],
 "schacon"=&gt;["lib", "tests"],
 "cdickens"=&gt;["doc"],
 "usinclair"=&gt;["doc"],
 "ebronte"=&gt;["doc"]}
이렇게 사용할 권한 정보를 만들었다. 이제 Push 하는 파일을 그 사용자가 Push 할 수 있는지 없는지 알아내야 한다.
git log 명령에 --name-only 옵션을 주면 해당 커밋에서 수정된 파일이 뭔지 알려준다(git log 명령은 Git의 기초에서 다루었다).
$ git log -1 --name-only --pretty=format:'' 9f585d
README
lib/test.rb
get_acl_access_data 메소드를 호출해서 ACL 정보를 구하고, 각 커밋에 들어 있는 파일 목록도 얻은 다음에, 사용자가 모든 커밋을 Push 할 수 있는지 판단한다.
# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('acl')
  # see if anyone is trying to push something they can't
  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  new_commits.each do |rev|
    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
    files_modified.each do |path|
      next if path.size == 0
      has_file_access = false
      access[$user].each do |access_path|
        if !access_path  # user has access to everything
           || (path.start_with? access_path) # access to this path
          has_file_access = true
        end
      end
      if !has_file_access
        puts "[POLICY] You do not have access to push to #{path}"
        exit 1
      end
    end
  end
end
check_directory_perms
먼저 git rev-list 명령으로 서버에 Push 하려는 커밋이 무엇인지 알아낸다.
그리고 각 커밋에서 수정한 파일이 어떤 것들이 있는지 찾고, 해당 사용자가 모든 파일에 대한 권한이 있는지 확인한다.
이제 사용자는 메시지 규칙을 어겼거나 권한이 없는 파일이 포함된 커밋은 어떤 것도 Push 하지 못한다.
새로 작성한 정책 테스트
이 정책을 다 구현해서 update 스크립트에 넣고 chmod u+x .git/hooks/update 명령으로 실행 권한을 준다. 그리고 틀린 형식으로 커밋 메시지를 작성하고 Push 하면 아래와 같이 실패한다.
$ git push -f origin master
Counting objects: 5, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 323 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Enforcing Policies...
(refs/heads/master) (8338c5) (c5b616)
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
To git@gitserver:project.git
 ! [remote rejected] master -&gt; master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
정책과 관련해 하나씩 살펴보자.
먼저 훅이 실행될 때마다 아래 메시지가 출력된다.
Enforcing Policies...
(refs/heads/master) (fb8c72) (c56860)
이 내용은 스크립트 윗부분에서 표준출력(stdout)에 출력한 내용이다.
스크립트에서 표준출력으로 출력하면 클라이언트로 전송된다.
그리고 아래의 에러 메시지를 살펴보자.
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
첫 번째 라인은 스크립트에서 직접 출력한 것이고 나머지 두 라인은 Git이 출력해 주는 것이다. 이 메시지는 update 스크립트에서 0이 아닌 값을 반환해서 Push 할 수 없다는 메시지다.
그리고 마지막 메시지를 보자.
To git@gitserver:project.git
 ! [remote rejected] master -&gt; master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
이 메시지는 훅에서 거절된 것이라고 말해주는 것이고 브랜치가 거부될 때마다 하나씩 출력된다.
그리고 누군가 권한이 없는 파일을 수정해서 Push 해도 에러 메시지를 출력한다.
예를 들어 문서 담당자가 lib 디렉토리에 있는 파일을 수정해서 커밋하면 아래와 같은 메시지가 출력된다.
[POLICY] You do not have access to push to lib/test.rb
이제부터는 update 스크립트가 항상 실행되기 때문에 커밋 메시지도 규칙대로 작성해야 하고, 권한이 있는 파일만 Push 할 수 있다.
클라이언트 훅
서버 훅의 단점은 Push 할 때까지 Push 할 수 있는지 없는지 알 수 없다는 데 있다.
기껏 공들여 정성껏 구현했는데 막상 Push 할 수 없으면 곤혹스럽다. 히스토리를 제대로 고치는 일은 정신건강에 매우 해롭다.
이 문제는 클라이언트 훅으로 해결한다. 클라이언트 훅으로 서버가 거부할지 말지 검사한다.
사람들은 커밋하기 전에, 그러니까 시간이 지나 고치기 어려워지기 전에 문제를 해결할 수 있다.
Clone 할 때 이 훅은 전송되지 않기 때문에 다른 방법으로 동료에게 배포해야 한다. 그 훅을 가져다 .git/hooks 디렉토리에 복사하고 실행할 수 있게 만든다.
이 훅 파일을 프로젝트에 넣어서 배포해도 되고 Git 훅 프로젝트를 만들어서 배포해도 된다. 하지만, 자동으로 설치하는 방법은 없다.
커밋 메시지부터 검사해보자. 이 훅이 있으면 커밋 메시지가 구리다고 서버가 뒤늦게 거절하지 않는다.
이것은 commit-msg 훅으로 구현한다.
이 훅은 커밋 메시지가 저장된 파일을 첫 번째 아규먼트로 입력받는다. 그 파일을 읽어 패턴을 검사한다. 필요한 패턴이 없으면 커밋을 중단시킨다.
#!/usr/bin/env ruby
message_file = ARGV[0]
message = File.read(message_file)
$regex = /\[ref: (\d+)\]/
if !$regex.match(message)
  puts "[POLICY] Your message is not formatted correctly"
  exit 1
end
이 스크립트를 .git/hooks/commit-msg 라는 파일로 만들고 실행권한을 준다. 커밋이 메시지 규칙을 어기면 아래와 같은 메시지를 보여 준다.
$ git commit -am 'test'
[POLICY] Your message is not formatted correctly
커밋하지 못했다.
하지만, 커밋 메지시를 바르게 작성하면 커밋할 수 있다.
$ git commit -am 'test [ref: 132]'
[master e05c914] test [ref: 132]
 1 file changed, 1 insertions(+), 0 deletions(-)
그리고 아예 권한이 없는 파일을 수정 못 하게 할 때는 pre-commit 훅을 이용한다.
사전에 .git 디렉토리 안에 ACL 파일을 가져다 놓고 아래와 같이 작성한다.
#!/usr/bin/env ruby
$user    = ENV['USER']
# [ insert acl_access_data method from above ]
# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('.git/acl')
  files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
  files_modified.each do |path|
    next if path.size == 0
    has_file_access = false
    access[$user].each do |access_path|
    if !access_path || (path.index(access_path) == 0)
      has_file_access = true
    end
    if !has_file_access
      puts "[POLICY] You do not have access to push to #{path}"
      exit 1
    end
  end
end
check_directory_perms
내용은 서버 훅과 똑같지만 두 가지가 다르다.
첫째, 클라이언트 훅은 Git 디렉토리가 아니라 워킹 디렉토리에서 실행하기 때문에 ACL 파일 위치가 다르다.
그래서 ACL 파일 경로를 수정해야 한다.
access = get_acl_access_data('acl')
이 부분을 아래와 같이 바꾼다.
access = get_acl_access_data('.git/acl')
두 번째 차이점은 파일 목록을 얻는 방법이다.
서버 훅에서는 커밋에 있는 파일을 모두 찾았지만 여기서는 아직 커밋하지도 않았다.
그래서 Staging Area의 파일 목록을 이용한다.
files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`
이 부분을 아래와 같이 바꾼다.
files_modified = `git diff-index --cached --name-only HEAD`
이 두 가지 점만 다르고 나머지는 똑같다.
보통은 리모트 저장소의 계정과 로컬의 계정도 같다.
다른 계정을 사용하려면 $user 환경변수에 누군지 알려야 한다.
이렇게 훅을 이용해 Fast-forward가 아닌 Push는 못 하게 만들 수 있다.
Fast-forward가 아닌 Push는 Rebase로 이미 Push 한 커밋을 바꿔 버렸거나 전혀 다른 로컬 브랜치를 Push 하지 못 하도록 하는 것이다.
서버에 이미 receive.denyDeletes 나 receive.denyNonFastForwards 설정을 했다면 더 좁혀진다. 이미 Push 한 커밋을 Rebase 해서 Push 하지 못 하게 만들 때 유용하다.
아래는 이미 Push 한 커밋을 Rebase 하지 못하게 하는 pre-Rebase 스크립트다.
이 스크립트는 먼저 Rebase 할 커밋 목록을 구하고 커밋이 리모트 Refs/브랜치에 들어 있는지 확인한다.
커밋이 한 개라도 리모트 Refs/브랜치에 들어 있으면 Rebase 할 수 없다.
#!/usr/bin/env ruby
base_branch = ARGV[0]
if ARGV[1]
  topic_branch = ARGV[1]
else
  topic_branch = "HEAD"
end
target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
remote_refs = `git branch -r`.split("\n").map { |r| r.strip }
target_shas.each do |sha|
  remote_refs.each do |remote_ref|
    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
    if shas_pushed.split("\n").include?(sha)
      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
      exit 1
    end
  end
end
이 스크립트는 리비전 조회하기 절에서 설명하지 않은 표현을 사용했다.
아래의 표현은 이미 Push 한 커밋 목록을 얻어오는 부분이다.
`git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
`SHA^@`은 해당 커밋의 모든 부모를 가리킨다.
그러니까 이 명령은 지금 Push 하려는 커밋에서 리모트 저장소의 커밋에 도달할 수 있는지 확인하는 명령이다. 즉, Fast-forward인지 확인하는 것이다.
이 방법은 매우 느리고 보통은 필요 없다. 어차피 Fast-forward가 아닌 Push는 -f 옵션을 주어야 Push 할 수 있다.
문제가 될만한 Rebase를 방지할 수 있다는 것을 보여주려고 이 예제를 설명했다.
prev | next
    About this site
    Patches, suggestions, and comments are welcome.
    Git is a member of Software Freedom Conservancy
