      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/pathspec.c
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      698 lines (580 sloc)
    17 KB
      Raw
        Blame
        #include "cache.h"
        #include "config.h"
        #include "dir.h"
        #include "pathspec.h"
        #include "attr.h"
        /*
         * Finds which of the given pathspecs match items in the index.
         *
         * For each pathspec, sets the corresponding entry in the seen[] array
         * (which should be specs items long, i.e. the same size as pathspec)
         * to the nature of the "closest" (i.e. most specific) match found for
         * that pathspec in the index, if it was a closer type of match than
         * the existing entry.  As an optimization, matching is skipped
         * altogether if seen[] already only contains non-zero entries.
         *
         * If seen[] has not already been written to, it may make sense
         * to use find_pathspecs_matching_against_index() instead.
         */
        void add_pathspec_matches_against_index(const struct pathspec *pathspec,
        					const struct index_state *istate,
        					char *seen)
        {
        	int num_unmatched = 0, i;
        	/*
        	 * Since we are walking the index as if we were walking the directory,
        	 * we have to mark the matched pathspec as seen; otherwise we will
        	 * mistakenly think that the user gave a pathspec that did not match
        	 * anything.
        	 */
        	for (i = 0; i &lt; pathspec-&gt;nr; i++)
        		if (!seen[i])
        			num_unmatched++;
        	if (!num_unmatched)
        		return;
        	for (i = 0; i &lt; istate-&gt;cache_nr; i++) {
        		const struct cache_entry *ce = istate-&gt;cache[i];
        		ce_path_match(istate, ce, pathspec, seen);
        	}
        }
        /*
         * Finds which of the given pathspecs match items in the index.
         *
         * This is a one-shot wrapper around add_pathspec_matches_against_index()
         * which allocates, populates, and returns a seen[] array indicating the
         * nature of the "closest" (i.e. most specific) matches which each of the
         * given pathspecs achieves against all items in the index.
         */
        char *find_pathspecs_matching_against_index(const struct pathspec *pathspec,
        					    const struct index_state *istate)
        {
        	char *seen = xcalloc(pathspec-&gt;nr, 1);
        	add_pathspec_matches_against_index(pathspec, istate, seen);
        	return seen;
        }
        /*
         * Magic pathspec
         *
         * Possible future magic semantics include stuff like:
         *
         *	{ PATHSPEC_RECURSIVE, '*', "recursive" },
         *	{ PATHSPEC_REGEXP, '\0', "regexp" },
         *
         */
        static struct pathspec_magic {
        	unsigned bit;
        	char mnemonic; /* this cannot be ':'! */
        	const char *name;
        } pathspec_magic[] = {
        	{ PATHSPEC_FROMTOP,  '/', "top" },
        	{ PATHSPEC_LITERAL, '\0', "literal" },
        	{ PATHSPEC_GLOB,    '\0', "glob" },
        	{ PATHSPEC_ICASE,   '\0', "icase" },
        	{ PATHSPEC_EXCLUDE,  '!', "exclude" },
        	{ PATHSPEC_ATTR,    '\0', "attr" },
        };
        static void prefix_magic(struct strbuf *sb, int prefixlen, unsigned magic)
        {
        	int i;
        	strbuf_addstr(sb, ":(");
        	for (i = 0; i &lt; ARRAY_SIZE(pathspec_magic); i++)
        		if (magic &amp; pathspec_magic[i].bit) {
        			if (sb-&gt;buf[sb-&gt;len - 1] != '(')
        				strbuf_addch(sb, ',');
        			strbuf_addstr(sb, pathspec_magic[i].name);
        		}
        	strbuf_addf(sb, ",prefix:%d)", prefixlen);
        }
        static size_t strcspn_escaped(const char *s, const char *stop)
        {
        	const char *i;
        	for (i = s; *i; i++) {
        		/* skip the escaped character */
        		if (i[0] == '\\' &amp;&amp; i[1]) {
        			i++;
        			continue;
        		}
        		if (strchr(stop, *i))
        			break;
        	}
        	return i - s;
        }
        static inline int invalid_value_char(const char ch)
        {
        	if (isalnum(ch) || strchr(",-_", ch))
        		return 0;
        	return -1;
        }
        static char *attr_value_unescape(const char *value)
        {
        	const char *src;
        	char *dst, *ret;
        	ret = xmallocz(strlen(value));
        	for (src = value, dst = ret; *src; src++, dst++) {
        		if (*src == '\\') {
        			if (!src[1])
        				die(_("Escape character '\\' not allowed as "
        				      "last character in attr value"));
        			src++;
        		}
        		if (invalid_value_char(*src))
        			die("cannot use '%c' for value matching", *src);
        		*dst = *src;
        	}
        	*dst = '\0';
        	return ret;
        }
        static void parse_pathspec_attr_match(struct pathspec_item *item, const char *value)
        {
        	struct string_list_item *si;
        	struct string_list list = STRING_LIST_INIT_DUP;
        	if (item-&gt;attr_check || item-&gt;attr_match)
        		die(_("Only one 'attr:' specification is allowed."));
        	if (!value || !*value)
        		die(_("attr spec must not be empty"));
        	string_list_split(&amp;list, value, ' ', -1);
        	string_list_remove_empty_items(&amp;list, 0);
        	item-&gt;attr_check = attr_check_alloc();
        	item-&gt;attr_match = xcalloc(list.nr, sizeof(struct attr_match));
        	for_each_string_list_item(si, &amp;list) {
        		size_t attr_len;
        		char *attr_name;
        		const struct git_attr *a;
        		int j = item-&gt;attr_match_nr++;
        		const char *attr = si-&gt;string;
        		struct attr_match *am = &amp;item-&gt;attr_match[j];
        		switch (*attr) {
        		case '!':
        			am-&gt;match_mode = MATCH_UNSPECIFIED;
        			attr++;
        			attr_len = strlen(attr);
        			break;
        		case '-':
        			am-&gt;match_mode = MATCH_UNSET;
        			attr++;
        			attr_len = strlen(attr);
        			break;
        		default:
        			attr_len = strcspn(attr, "=");
        			if (attr[attr_len] != '=')
        				am-&gt;match_mode = MATCH_SET;
        			else {
        				const char *v = &amp;attr[attr_len + 1];
        				am-&gt;match_mode = MATCH_VALUE;
        				am-&gt;value = attr_value_unescape(v);
        			}
        			break;
        		}
        		attr_name = xmemdupz(attr, attr_len);
        		a = git_attr(attr_name);
        		if (!a)
        			die(_("invalid attribute name %s"), attr_name);
        		attr_check_append(item-&gt;attr_check, a);
        		free(attr_name);
        	}
        	if (item-&gt;attr_check-&gt;nr != item-&gt;attr_match_nr)
        		BUG("should have same number of entries");
        	string_list_clear(&amp;list, 0);
        }
        static inline int get_literal_global(void)
        {
        	static int literal = -1;
        	if (literal &lt; 0)
        		literal = git_env_bool(GIT_LITERAL_PATHSPECS_ENVIRONMENT, 0);
        	return literal;
        }
        static inline int get_glob_global(void)
        {
        	static int glob = -1;
        	if (glob &lt; 0)
        		glob = git_env_bool(GIT_GLOB_PATHSPECS_ENVIRONMENT, 0);
        	return glob;
        }
        static inline int get_noglob_global(void)
        {
        	static int noglob = -1;
        	if (noglob &lt; 0)
        		noglob = git_env_bool(GIT_NOGLOB_PATHSPECS_ENVIRONMENT, 0);
        	return noglob;
        }
        static inline int get_icase_global(void)
        {
        	static int icase = -1;
        	if (icase &lt; 0)
        		icase = git_env_bool(GIT_ICASE_PATHSPECS_ENVIRONMENT, 0);
        	return icase;
        }
        static int get_global_magic(int element_magic)
        {
        	int global_magic = 0;
        	if (get_literal_global())
        		global_magic |= PATHSPEC_LITERAL;
        	/* --glob-pathspec is overridden by :(literal) */
        	if (get_glob_global() &amp;&amp; !(element_magic &amp; PATHSPEC_LITERAL))
        		global_magic |= PATHSPEC_GLOB;
        	if (get_glob_global() &amp;&amp; get_noglob_global())
        		die(_("global 'glob' and 'noglob' pathspec settings are incompatible"));
        	if (get_icase_global())
        		global_magic |= PATHSPEC_ICASE;
        	if ((global_magic &amp; PATHSPEC_LITERAL) &amp;&amp;
        	    (global_magic &amp; ~PATHSPEC_LITERAL))
        		die(_("global 'literal' pathspec setting is incompatible "
        		      "with all other global pathspec settings"));
        	/* --noglob-pathspec adds :(literal) _unless_ :(glob) is specified */
        	if (get_noglob_global() &amp;&amp; !(element_magic &amp; PATHSPEC_GLOB))
        		global_magic |= PATHSPEC_LITERAL;
        	return global_magic;
        }
        /*
         * Parse the pathspec element looking for long magic
         *
         * saves all magic in 'magic'
         * if prefix magic is used, save the prefix length in 'prefix_len'
         * returns the position in 'elem' after all magic has been parsed
         */
        static const char *parse_long_magic(unsigned *magic, int *prefix_len,
        				    struct pathspec_item *item,
        				    const char *elem)
        {
        	const char *pos;
        	const char *nextat;
        	for (pos = elem + 2; *pos &amp;&amp; *pos != ')'; pos = nextat) {
        		size_t len = strcspn_escaped(pos, ",)");
        		int i;
        		if (pos[len] == ',')
        			nextat = pos + len + 1; /* handle ',' */
        		else
        			nextat = pos + len; /* handle ')' and '\0' */
        		if (!len)
        			continue;
        		if (starts_with(pos, "prefix:")) {
        			char *endptr;
        			*prefix_len = strtol(pos + 7, &amp;endptr, 10);
        			if (endptr - pos != len)
        				die(_("invalid parameter for pathspec magic 'prefix'"));
        			continue;
        		}
        		if (starts_with(pos, "attr:")) {
        			char *attr_body = xmemdupz(pos + 5, len - 5);
        			parse_pathspec_attr_match(item, attr_body);
        			*magic |= PATHSPEC_ATTR;
        			free(attr_body);
        			continue;
        		}
        		for (i = 0; i &lt; ARRAY_SIZE(pathspec_magic); i++) {
        			if (strlen(pathspec_magic[i].name) == len &amp;&amp;
        			    !strncmp(pathspec_magic[i].name, pos, len)) {
        				*magic |= pathspec_magic[i].bit;
        				break;
        			}
        		}
        		if (ARRAY_SIZE(pathspec_magic) &lt;= i)
        			die(_("Invalid pathspec magic '%.*s' in '%s'"),
        			    (int) len, pos, elem);
        	}
        	if (*pos != ')')
        		die(_("Missing ')' at the end of pathspec magic in '%s'"),
        		    elem);
        	pos++;
        	return pos;
        }
        /*
         * Parse the pathspec element looking for short magic
         *
         * saves all magic in 'magic'
         * returns the position in 'elem' after all magic has been parsed
         */
        static const char *parse_short_magic(unsigned *magic, const char *elem)
        {
        	const char *pos;
        	for (pos = elem + 1; *pos &amp;&amp; *pos != ':'; pos++) {
        		char ch = *pos;
        		int i;
        		/* Special case alias for '!' */
        		if (ch == '^') {
        			*magic |= PATHSPEC_EXCLUDE;
        			continue;
        		}
        		if (!is_pathspec_magic(ch))
        			break;
        		for (i = 0; i &lt; ARRAY_SIZE(pathspec_magic); i++) {
        			if (pathspec_magic[i].mnemonic == ch) {
        				*magic |= pathspec_magic[i].bit;
        				break;
        			}
        		}
        		if (ARRAY_SIZE(pathspec_magic) &lt;= i)
        			die(_("Unimplemented pathspec magic '%c' in '%s'"),
        			    ch, elem);
        	}
        	if (*pos == ':')
        		pos++;
        	return pos;
        }
        static const char *parse_element_magic(unsigned *magic, int *prefix_len,
        				       struct pathspec_item *item,
        				       const char *elem)
        {
        	if (elem[0] != ':' || get_literal_global())
        		return elem; /* nothing to do */
        	else if (elem[1] == '(')
        		/* longhand */
        		return parse_long_magic(magic, prefix_len, item, elem);
        	else
        		/* shorthand */
        		return parse_short_magic(magic, elem);
        }
        /*
         * Perform the initialization of a pathspec_item based on a pathspec element.
         */
        static void init_pathspec_item(struct pathspec_item *item, unsigned flags,
        			       const char *prefix, int prefixlen,
        			       const char *elt)
        {
        	unsigned magic = 0, element_magic = 0;
        	const char *copyfrom = elt;
        	char *match;
        	int pathspec_prefix = -1;
        	item-&gt;attr_check = NULL;
        	item-&gt;attr_match = NULL;
        	item-&gt;attr_match_nr = 0;
        	/* PATHSPEC_LITERAL_PATH ignores magic */
        	if (flags &amp; PATHSPEC_LITERAL_PATH) {
        		magic = PATHSPEC_LITERAL;
        	} else {
        		copyfrom = parse_element_magic(&amp;element_magic,
        					       &amp;pathspec_prefix,
        					       item,
        					       elt);
        		magic |= element_magic;
        		magic |= get_global_magic(element_magic);
        	}
        	item-&gt;magic = magic;
        	if (pathspec_prefix &gt;= 0 &amp;&amp;
        	    (prefixlen || (prefix &amp;&amp; *prefix)))
        		BUG("'prefix' magic is supposed to be used at worktree's root");
        	if ((magic &amp; PATHSPEC_LITERAL) &amp;&amp; (magic &amp; PATHSPEC_GLOB))
        		die(_("%s: 'literal' and 'glob' are incompatible"), elt);
        	/* Create match string which will be used for pathspec matching */
        	if (pathspec_prefix &gt;= 0) {
        		match = xstrdup(copyfrom);
        		prefixlen = pathspec_prefix;
        	} else if (magic &amp; PATHSPEC_FROMTOP) {
        		match = xstrdup(copyfrom);
        		prefixlen = 0;
        	} else {
        		match = prefix_path_gently(prefix, prefixlen,
        					   &amp;prefixlen, copyfrom);
        		if (!match)
        			die(_("%s: '%s' is outside repository"), elt, copyfrom);
        	}
        	item-&gt;match = match;
        	item-&gt;len = strlen(item-&gt;match);
        	item-&gt;prefix = prefixlen;
        	/*
        	 * Prefix the pathspec (keep all magic) and assign to
        	 * original. Useful for passing to another command.
        	 */
        	if ((flags &amp; PATHSPEC_PREFIX_ORIGIN) &amp;&amp;
        	    !get_literal_global()) {
        		struct strbuf sb = STRBUF_INIT;
        		/* Preserve the actual prefix length of each pattern */
        		prefix_magic(&amp;sb, prefixlen, element_magic);
        		strbuf_addstr(&amp;sb, match);
        		item-&gt;original = strbuf_detach(&amp;sb, NULL);
        	} else {
        		item-&gt;original = xstrdup(elt);
        	}
        	if (magic &amp; PATHSPEC_LITERAL) {
        		item-&gt;nowildcard_len = item-&gt;len;
        	} else {
        		item-&gt;nowildcard_len = simple_length(item-&gt;match);
        		if (item-&gt;nowildcard_len &lt; prefixlen)
        			item-&gt;nowildcard_len = prefixlen;
        	}
        	item-&gt;flags = 0;
        	if (magic &amp; PATHSPEC_GLOB) {
        		/*
        		 * FIXME: should we enable ONESTAR in _GLOB for
        		 * pattern "* * / * . c"?
        		 */
        	} else {
        		if (item-&gt;nowildcard_len &lt; item-&gt;len &amp;&amp;
        		    item-&gt;match[item-&gt;nowildcard_len] == '*' &amp;&amp;
        		    no_wildcard(item-&gt;match + item-&gt;nowildcard_len + 1))
        			item-&gt;flags |= PATHSPEC_ONESTAR;
        	}
        	/* sanity checks, pathspec matchers assume these are sane */
        	if (item-&gt;nowildcard_len &gt; item-&gt;len ||
        	    item-&gt;prefix         &gt; item-&gt;len) {
        		BUG("error initializing pathspec_item");
        	}
        }
        static int pathspec_item_cmp(const void *a_, const void *b_)
        {
        	struct pathspec_item *a, *b;
        	a = (struct pathspec_item *)a_;
        	b = (struct pathspec_item *)b_;
        	return strcmp(a-&gt;match, b-&gt;match);
        }
        static void NORETURN unsupported_magic(const char *pattern,
        				       unsigned magic)
        {
        	struct strbuf sb = STRBUF_INIT;
        	int i;
        	for (i = 0; i &lt; ARRAY_SIZE(pathspec_magic); i++) {
        		const struct pathspec_magic *m = pathspec_magic + i;
        		if (!(magic &amp; m-&gt;bit))
        			continue;
        		if (sb.len)
        			strbuf_addstr(&amp;sb, ", ");
        		if (m-&gt;mnemonic)
        			strbuf_addf(&amp;sb, _("'%s' (mnemonic: '%c')"),
        				    m-&gt;name, m-&gt;mnemonic);
        		else
        			strbuf_addf(&amp;sb, "'%s'", m-&gt;name);
        	}
        	/*
        	 * We may want to substitute "this command" with a command
        	 * name. E.g. when add--interactive dies when running
        	 * "checkout -p"
        	 */
        	die(_("%s: pathspec magic not supported by this command: %s"),
        	    pattern, sb.buf);
        }
        void parse_pathspec(struct pathspec *pathspec,
        		    unsigned magic_mask, unsigned flags,
        		    const char *prefix, const char **argv)
        {
        	struct pathspec_item *item;
        	const char *entry = argv ? *argv : NULL;
        	int i, n, prefixlen, nr_exclude = 0;
        	memset(pathspec, 0, sizeof(*pathspec));
        	if (flags &amp; PATHSPEC_MAXDEPTH_VALID)
        		pathspec-&gt;magic |= PATHSPEC_MAXDEPTH;
        	/* No arguments, no prefix -&gt; no pathspec */
        	if (!entry &amp;&amp; !prefix)
        		return;
        	if ((flags &amp; PATHSPEC_PREFER_CWD) &amp;&amp;
        	    (flags &amp; PATHSPEC_PREFER_FULL))
        		BUG("PATHSPEC_PREFER_CWD and PATHSPEC_PREFER_FULL are incompatible");
        	/* No arguments with prefix -&gt; prefix pathspec */
        	if (!entry) {
        		if (flags &amp; PATHSPEC_PREFER_FULL)
        			return;
        		if (!(flags &amp; PATHSPEC_PREFER_CWD))
        			BUG("PATHSPEC_PREFER_CWD requires arguments");
        		pathspec-&gt;items = item = xcalloc(1, sizeof(*item));
        		item-&gt;match = xstrdup(prefix);
        		item-&gt;original = xstrdup(prefix);
        		item-&gt;nowildcard_len = item-&gt;len = strlen(prefix);
        		item-&gt;prefix = item-&gt;len;
        		pathspec-&gt;nr = 1;
        		return;
        	}
        	n = 0;
        	while (argv[n]) {
        		if (*argv[n] == '\0')
        			die("empty string is not a valid pathspec. "
        				  "please use . instead if you meant to match all paths");
        		n++;
        	}
        	pathspec-&gt;nr = n;
        	ALLOC_ARRAY(pathspec-&gt;items, n + 1);
        	item = pathspec-&gt;items;
        	prefixlen = prefix ? strlen(prefix) : 0;
        	for (i = 0; i &lt; n; i++) {
        		entry = argv[i];
        		init_pathspec_item(item + i, flags, prefix, prefixlen, entry);
        		if (item[i].magic &amp; PATHSPEC_EXCLUDE)
        			nr_exclude++;
        		if (item[i].magic &amp; magic_mask)
        			unsupported_magic(entry, item[i].magic &amp; magic_mask);
        		if ((flags &amp; PATHSPEC_SYMLINK_LEADING_PATH) &amp;&amp;
        		    has_symlink_leading_path(item[i].match, item[i].len)) {
        			die(_("pathspec '%s' is beyond a symbolic link"), entry);
        		}
        		if (item[i].nowildcard_len &lt; item[i].len)
        			pathspec-&gt;has_wildcard = 1;
        		pathspec-&gt;magic |= item[i].magic;
        	}
        	/*
        	 * If everything is an exclude pattern, add one positive pattern
        	 * that matches everything. We allocated an extra one for this.
        	 */
        	if (nr_exclude == n) {
        		int plen = (!(flags &amp; PATHSPEC_PREFER_CWD)) ? 0 : prefixlen;
        		init_pathspec_item(item + n, 0, prefix, plen, "");
        		pathspec-&gt;nr++;
        	}
        	if (pathspec-&gt;magic &amp; PATHSPEC_MAXDEPTH) {
        		if (flags &amp; PATHSPEC_KEEP_ORDER)
        			BUG("PATHSPEC_MAXDEPTH_VALID and PATHSPEC_KEEP_ORDER are incompatible");
        		QSORT(pathspec-&gt;items, pathspec-&gt;nr, pathspec_item_cmp);
        	}
        }
        void copy_pathspec(struct pathspec *dst, const struct pathspec *src)
        {
        	int i, j;
        	*dst = *src;
        	ALLOC_ARRAY(dst-&gt;items, dst-&gt;nr);
        	COPY_ARRAY(dst-&gt;items, src-&gt;items, dst-&gt;nr);
        	for (i = 0; i &lt; dst-&gt;nr; i++) {
        		struct pathspec_item *d = &amp;dst-&gt;items[i];
        		struct pathspec_item *s = &amp;src-&gt;items[i];
        		d-&gt;match = xstrdup(s-&gt;match);
        		d-&gt;original = xstrdup(s-&gt;original);
        		ALLOC_ARRAY(d-&gt;attr_match, d-&gt;attr_match_nr);
        		COPY_ARRAY(d-&gt;attr_match, s-&gt;attr_match, d-&gt;attr_match_nr);
        		for (j = 0; j &lt; d-&gt;attr_match_nr; j++) {
        			const char *value = s-&gt;attr_match[j].value;
        			d-&gt;attr_match[j].value = xstrdup_or_null(value);
        		}
        		d-&gt;attr_check = attr_check_dup(s-&gt;attr_check);
        	}
        }
        void clear_pathspec(struct pathspec *pathspec)
        {
        	int i, j;
        	for (i = 0; i &lt; pathspec-&gt;nr; i++) {
        		free(pathspec-&gt;items[i].match);
        		free(pathspec-&gt;items[i].original);
        		for (j = 0; j &lt; pathspec-&gt;items[i].attr_match_nr; j++)
        			free(pathspec-&gt;items[i].attr_match[j].value);
        		free(pathspec-&gt;items[i].attr_match);
        		if (pathspec-&gt;items[i].attr_check)
        			attr_check_free(pathspec-&gt;items[i].attr_check);
        	}
        	FREE_AND_NULL(pathspec-&gt;items);
        	pathspec-&gt;nr = 0;
        }
        int match_pathspec_attrs(const struct index_state *istate,
        			 const char *name, int namelen,
        			 const struct pathspec_item *item)
        {
        	int i;
        	char *to_free = NULL;
        	if (name[namelen])
        		name = to_free = xmemdupz(name, namelen);
        	git_check_attr(istate, name, item-&gt;attr_check);
        	free(to_free);
        	for (i = 0; i &lt; item-&gt;attr_match_nr; i++) {
        		const char *value;
        		int matched;
        		enum attr_match_mode match_mode;
        		value = item-&gt;attr_check-&gt;items[i].value;
        		match_mode = item-&gt;attr_match[i].match_mode;
        		if (ATTR_TRUE(value))
        			matched = (match_mode == MATCH_SET);
        		else if (ATTR_FALSE(value))
        			matched = (match_mode == MATCH_UNSET);
        		else if (ATTR_UNSET(value))
        			matched = (match_mode == MATCH_UNSPECIFIED);
        		else
        			matched = (match_mode == MATCH_VALUE &amp;&amp;
        				   !strcmp(item-&gt;attr_match[i].value, value));
        		if (!matched)
        			return 0;
        	}
        	return 1;
        }
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
