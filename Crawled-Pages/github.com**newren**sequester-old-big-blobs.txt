      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    sequester-old-big-blobs
    Watch
      1
      Star
      3
          Fork
        0
        Hack to ameloriate ancient large blobs in a repo without rewriting history
        3
        stars
        0
        forks
      Star
    Watch
            Code
            Issues
              0
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Issues
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
      1
      branch
      0
      tags
    Go to file
      Code
  Clone
       -->
            HTTPS
            GitHub CLI
        Use Git or checkout with SVN using the web URL.
      Work fast with our official CLI.
      Learn more.
                Open with GitHub Desktop
                Download ZIP
          Launching GitHub Desktop
          If nothing happens, download GitHub Desktop and try again.
          Go back
          Launching GitHub Desktop
          If nothing happens, download GitHub Desktop and try again.
          Go back
          Launching Xcode
          If nothing happens, download Xcode and try again.
          Go back
          Launching Visual Studio
          If nothing happens, download the GitHub extension for Visual Studio and try again.
          Go back
    Latest commit
        Git stats
                    5
                  commits
  Files
      Permalink
    Failed to load latest commit information.
        Type
        Name
        Latest commit message
        Commit time
            README.md
            sequester-old-big-blobs.py
        View code
        README.md
        TABLE OF CONTENTS
Purpose
Usage
Cheap Fake Clones
PURPOSE
This is a simple script to put old, big blobs into a separate packfile
from everything else and creates a .keep file for that pack.  The
advantages to doing so are as follows:
It enables cheap aggressive repacking of the small stuff.
By keeping a .keep pack around with the really large files that
are considered ancient, you can more easily do an aggressive
repack of everything else without the heavy expense of
delta-ing and repacking the huge files.
It enables cheap, "fake" clones for continuous integration.
Cheap fake clones are similar to shallow clones in that they
don't have all objects, but without the atrociously negative
workflow side-effects and without gutting debugging capability: one
can still run git describe and git log and get useful
information since commits and tags are included back to the root.
Most operations work just fine; you only run into problems if you
specifically run some operation that tries to access the old
objects (e.g. git log -p and hold PageDown until you get to an
old object, or try to run git fsck or clone your fake clone).
See 'CHEAP FAKE CLONES' below for more details.
It enables cheap, fake clones for very adventerous developers.
If you request replace objects to replace the big blobs by simple
text files, then the only git operations that fail are those that
ignore replace objects (fsck, gc/prune, and clone/fetch of
sufficiently old history).  The smaller repo takes up less space,
and will even make git log -S/-G and git grep on older revisions
run faster.
Of course, if your project is ready for a flag day to just excise the
big old objects, git
filter-repo can help you
do so.  sequester-old-big-blobs only exists for those projects that
are not yet ready for a flag day rewrite of history because they need
commit ids to not change.
USAGE
  sequester-old-big-blobs.py --since &lt;WHEN&gt;
                             [--size-cutoff &lt;SIZE&gt;]
                             [--replace-objects]
                             [-- REVS]
This command will place all objects larger than SIZE and older than
WHEN and reachable from REVS into a separate packfile.  It will then
prune any revisions not mentioned in REVS, and do an aggressive repack
of remaining objects.  If --replace-objects is specified, replace refs
for all the old, big objects will be created.
Examples:
  sequester-old-big-blobs.py --since 2017-06-25 -- \
      $(git for-each-ref --format='%(refname)'
                         $(git rev-parse --symbolic-full-name HEAD HEAD@{u})
                         refs/tags/v3.1[5-9]* refs/tags/v3.[2-9]*
                         refs/remotes/origin/3.1[5-9]*
                         refs/remotes/origin/3.[2-9]*)
Before this command:
    $ (cd .git/objects/pack &amp;&amp; du -ms *)
    129     pack-7177d0fc85ca7cb07ad85ed32ce85557357a0ccf.idx
    9558    pack-7177d0fc85ca7cb07ad85ed32ce85557357a0ccf.pack
After this command:
    $ (cd .git/objects/pack &amp;&amp; du -ms *)
    1       big-old-objects-3d4f228aad746e737a9f712946f3c2f7ebd9c141.idx
    0       big-old-objects-3d4f228aad746e737a9f712946f3c2f7ebd9c141.keep
    7257    big-old-objects-3d4f228aad746e737a9f712946f3c2f7ebd9c141.pack
    117     pack-d4fd34c2ec824f552b08225b8151f8fd218268e0.idx
    1100    pack-d4fd34c2ec824f552b08225b8151f8fd218268e0.pack
  sequester-old-big-blobs.py --since 2019-01-01 --size-cutoff 100k -- \
      $(git for-each-ref --format='%(refname)'
                         $(git rev-parse --symbolic-full-name HEAD HEAD@{u})
                         refs/tags/100.3019* refs/tags/100.30[2-9]*
                         refs/remotes/origin/release/3.19*
                         refs/remotes/origin/release/3.[2-9]*)
Before this command:
    $ (cd .git/objects/pack &amp;&amp; du -ms *)
    64      pack-9137f15ae8b793a6d296857e1ee1e983b5f82a79.idx
    1412    pack-9137f15ae8b793a6d296857e1ee1e983b5f82a79.pack
After this command:
    $ (cd .git/objects/pack &amp;&amp; du -ms *)
    1	    big-old-objects-f4bfd0644447b997fbfc2c0bc01eb47efae26460.idx
    0	    big-old-objects-f4bfd0644447b997fbfc2c0bc01eb47efae26460.keep
    549	    big-old-objects-f4bfd0644447b997fbfc2c0bc01eb47efae26460.pack
    34	    pack-f4ea1142bb3f5484d0d948d7ec6ab7f9352da572.idx
    359	    pack-f4ea1142bb3f5484d0d948d7ec6ab7f9352da572.pack
You may find git filter-repo --analyze helpful in picking the
--since and --size-cutoff parameters.
CHEAP FAKE CLONES
You can create a cheap fake clone by:
git clone the actual repository you want (--no-checkout may be useful)
Run this script with appropriate paramaters, e.g.
sequester-old-big-blobs.py --since 2016-01-01
Do some cleanup:
find .git -type d -empty -delete
Create the "cloneable" archive:
  tar cf shrunk-clone.tar \
     --exclude=index --exclude=logs --exclude=info --exclude=hooks \
     --exclude=big-old-objects-* \
     .git```
(Note: Step 3 is optional, as is the first line of excludes from step 4.)
And then can use the cheap fake clone by:
Copy/download shrunk-clone.tar
mkdir somedir  (or git init somedir; doesn't matter)
cd somedir
tar xf shrunk-clone.tar
git reset --hard
            About
      Hack to ameloriate ancient large blobs in a repo without rewriting history
  Resources
      Readme
    Releases
    No releases published
    Packages 0
        No packages published 
              Languages
        Python
        100.0%
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
