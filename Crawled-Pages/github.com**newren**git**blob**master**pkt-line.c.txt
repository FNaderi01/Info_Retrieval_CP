      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/pkt-line.c
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      570 lines (479 sloc)
    13 KB
      Raw
        Blame
        #include "cache.h"
        #include "pkt-line.h"
        #include "run-command.h"
        char packet_buffer[LARGE_PACKET_MAX];
        static const char *packet_trace_prefix = "git";
        static struct trace_key trace_packet = TRACE_KEY_INIT(PACKET);
        static struct trace_key trace_pack = TRACE_KEY_INIT(PACKFILE);
        void packet_trace_identity(const char *prog)
        {
        	packet_trace_prefix = xstrdup(prog);
        }
        static const char *get_trace_prefix(void)
        {
        	return in_async() ? "sideband" : packet_trace_prefix;
        }
        static int packet_trace_pack(const char *buf, unsigned int len, int sideband)
        {
        	if (!sideband) {
        		trace_verbatim(&amp;trace_pack, buf, len);
        		return 1;
        	} else if (len &amp;&amp; *buf == '\1') {
        		trace_verbatim(&amp;trace_pack, buf + 1, len - 1);
        		return 1;
        	} else {
        		/* it's another non-pack sideband */
        		return 0;
        	}
        }
        static void packet_trace(const char *buf, unsigned int len, int write)
        {
        	int i;
        	struct strbuf out;
        	static int in_pack, sideband;
        	if (!trace_want(&amp;trace_packet) &amp;&amp; !trace_want(&amp;trace_pack))
        		return;
        	if (in_pack) {
        		if (packet_trace_pack(buf, len, sideband))
        			return;
        	} else if (starts_with(buf, "PACK") || starts_with(buf, "\1PACK")) {
        		in_pack = 1;
        		sideband = *buf == '\1';
        		packet_trace_pack(buf, len, sideband);
        		/*
        		 * Make a note in the human-readable trace that the pack data
        		 * started.
        		 */
        		buf = "PACK ...";
        		len = strlen(buf);
        	}
        	if (!trace_want(&amp;trace_packet))
        		return;
        	/* +32 is just a guess for header + quoting */
        	strbuf_init(&amp;out, len+32);
        	strbuf_addf(&amp;out, "packet: %12s%c ",
        		    get_trace_prefix(), write ? '&gt;' : '&lt;');
        	/* XXX we should really handle printable utf8 */
        	for (i = 0; i &lt; len; i++) {
        		/* suppress newlines */
        		if (buf[i] == '\n')
        			continue;
        		if (buf[i] &gt;= 0x20 &amp;&amp; buf[i] &lt;= 0x7e)
        			strbuf_addch(&amp;out, buf[i]);
        		else
        			strbuf_addf(&amp;out, "\\%o", buf[i]);
        	}
        	strbuf_addch(&amp;out, '\n');
        	trace_strbuf(&amp;trace_packet, &amp;out);
        	strbuf_release(&amp;out);
        }
        /*
         * If we buffered things up above (we don't, but we should),
         * we'd flush it here
         */
        void packet_flush(int fd)
        {
        	packet_trace("0000", 4, 1);
        	if (write_in_full(fd, "0000", 4) &lt; 0)
        		die_errno(_("unable to write flush packet"));
        }
        void packet_delim(int fd)
        {
        	packet_trace("0001", 4, 1);
        	if (write_in_full(fd, "0001", 4) &lt; 0)
        		die_errno(_("unable to write delim packet"));
        }
        int packet_flush_gently(int fd)
        {
        	packet_trace("0000", 4, 1);
        	if (write_in_full(fd, "0000", 4) &lt; 0)
        		return error(_("flush packet write failed"));
        	return 0;
        }
        void packet_buf_flush(struct strbuf *buf)
        {
        	packet_trace("0000", 4, 1);
        	strbuf_add(buf, "0000", 4);
        }
        void packet_buf_delim(struct strbuf *buf)
        {
        	packet_trace("0001", 4, 1);
        	strbuf_add(buf, "0001", 4);
        }
        void set_packet_header(char *buf, int size)
        {
        	static char hexchar[] = "0123456789abcdef";
        	#define hex(a) (hexchar[(a) &amp; 15])
        	buf[0] = hex(size &gt;&gt; 12);
        	buf[1] = hex(size &gt;&gt; 8);
        	buf[2] = hex(size &gt;&gt; 4);
        	buf[3] = hex(size);
        	#undef hex
        }
        static void format_packet(struct strbuf *out, const char *prefix,
        			  const char *fmt, va_list args)
        {
        	size_t orig_len, n;
        	orig_len = out-&gt;len;
        	strbuf_addstr(out, "0000");
        	strbuf_addstr(out, prefix);
        	strbuf_vaddf(out, fmt, args);
        	n = out-&gt;len - orig_len;
        	if (n &gt; LARGE_PACKET_MAX)
        		die(_("protocol error: impossibly long line"));
        	set_packet_header(&amp;out-&gt;buf[orig_len], n);
        	packet_trace(out-&gt;buf + orig_len + 4, n - 4, 1);
        }
        static int packet_write_fmt_1(int fd, int gently, const char *prefix,
        			      const char *fmt, va_list args)
        {
        	static struct strbuf buf = STRBUF_INIT;
        	strbuf_reset(&amp;buf);
        	format_packet(&amp;buf, prefix, fmt, args);
        	if (write_in_full(fd, buf.buf, buf.len) &lt; 0) {
        		if (!gently) {
        			check_pipe(errno);
        			die_errno(_("packet write with format failed"));
        		}
        		return error(_("packet write with format failed"));
        	}
        	return 0;
        }
        void packet_write_fmt(int fd, const char *fmt, ...)
        {
        	va_list args;
        	va_start(args, fmt);
        	packet_write_fmt_1(fd, 0, "", fmt, args);
        	va_end(args);
        }
        int packet_write_fmt_gently(int fd, const char *fmt, ...)
        {
        	int status;
        	va_list args;
        	va_start(args, fmt);
        	status = packet_write_fmt_1(fd, 1, "", fmt, args);
        	va_end(args);
        	return status;
        }
        static int packet_write_gently(const int fd_out, const char *buf, size_t size)
        {
        	static char packet_write_buffer[LARGE_PACKET_MAX];
        	size_t packet_size;
        	if (size &gt; sizeof(packet_write_buffer) - 4)
        		return error(_("packet write failed - data exceeds max packet size"));
        	packet_trace(buf, size, 1);
        	packet_size = size + 4;
        	set_packet_header(packet_write_buffer, packet_size);
        	memcpy(packet_write_buffer + 4, buf, size);
        	if (write_in_full(fd_out, packet_write_buffer, packet_size) &lt; 0)
        		return error(_("packet write failed"));
        	return 0;
        }
        void packet_write(int fd_out, const char *buf, size_t size)
        {
        	if (packet_write_gently(fd_out, buf, size))
        		die_errno(_("packet write failed"));
        }
        void packet_buf_write(struct strbuf *buf, const char *fmt, ...)
        {
        	va_list args;
        	va_start(args, fmt);
        	format_packet(buf, "", fmt, args);
        	va_end(args);
        }
        void packet_buf_write_len(struct strbuf *buf, const char *data, size_t len)
        {
        	size_t orig_len, n;
        	orig_len = buf-&gt;len;
        	strbuf_addstr(buf, "0000");
        	strbuf_add(buf, data, len);
        	n = buf-&gt;len - orig_len;
        	if (n &gt; LARGE_PACKET_MAX)
        		die(_("protocol error: impossibly long line"));
        	set_packet_header(&amp;buf-&gt;buf[orig_len], n);
        	packet_trace(data, len, 1);
        }
        int write_packetized_from_fd(int fd_in, int fd_out)
        {
        	static char buf[LARGE_PACKET_DATA_MAX];
        	int err = 0;
        	ssize_t bytes_to_write;
        	while (!err) {
        		bytes_to_write = xread(fd_in, buf, sizeof(buf));
        		if (bytes_to_write &lt; 0)
        			return COPY_READ_ERROR;
        		if (bytes_to_write == 0)
        			break;
        		err = packet_write_gently(fd_out, buf, bytes_to_write);
        	}
        	if (!err)
        		err = packet_flush_gently(fd_out);
        	return err;
        }
        int write_packetized_from_buf(const char *src_in, size_t len, int fd_out)
        {
        	int err = 0;
        	size_t bytes_written = 0;
        	size_t bytes_to_write;
        	while (!err) {
        		if ((len - bytes_written) &gt; LARGE_PACKET_DATA_MAX)
        			bytes_to_write = LARGE_PACKET_DATA_MAX;
        		else
        			bytes_to_write = len - bytes_written;
        		if (bytes_to_write == 0)
        			break;
        		err = packet_write_gently(fd_out, src_in + bytes_written, bytes_to_write);
        		bytes_written += bytes_to_write;
        	}
        	if (!err)
        		err = packet_flush_gently(fd_out);
        	return err;
        }
        static int get_packet_data(int fd, char **src_buf, size_t *src_size,
        			   void *dst, unsigned size, int options)
        {
        	ssize_t ret;
        	if (fd &gt;= 0 &amp;&amp; src_buf &amp;&amp; *src_buf)
        		BUG("multiple sources given to packet_read");
        	/* Read up to "size" bytes from our source, whatever it is. */
        	if (src_buf &amp;&amp; *src_buf) {
        		ret = size &lt; *src_size ? size : *src_size;
        		memcpy(dst, *src_buf, ret);
        		*src_buf += ret;
        		*src_size -= ret;
        	} else {
        		ret = read_in_full(fd, dst, size);
        		if (ret &lt; 0)
        			die_errno(_("read error"));
        	}
        	/* And complain if we didn't get enough bytes to satisfy the read. */
        	if (ret != size) {
        		if (options &amp; PACKET_READ_GENTLE_ON_EOF)
        			return -1;
        		die(_("the remote end hung up unexpectedly"));
        	}
        	return ret;
        }
        static int packet_length(const char *linelen)
        {
        	int val = hex2chr(linelen);
        	return (val &lt; 0) ? val : (val &lt;&lt; 8) | hex2chr(linelen + 2);
        }
        enum packet_read_status packet_read_with_status(int fd, char **src_buffer,
        						size_t *src_len, char *buffer,
        						unsigned size, int *pktlen,
        						int options)
        {
        	int len;
        	char linelen[4];
        	if (get_packet_data(fd, src_buffer, src_len, linelen, 4, options) &lt; 0) {
        		*pktlen = -1;
        		return PACKET_READ_EOF;
        	}
        	len = packet_length(linelen);
        	if (len &lt; 0) {
        		die(_("protocol error: bad line length character: %.4s"), linelen);
        	} else if (!len) {
        		packet_trace("0000", 4, 0);
        		*pktlen = 0;
        		return PACKET_READ_FLUSH;
        	} else if (len == 1) {
        		packet_trace("0001", 4, 0);
        		*pktlen = 0;
        		return PACKET_READ_DELIM;
        	} else if (len &lt; 4) {
        		die(_("protocol error: bad line length %d"), len);
        	}
        	len -= 4;
        	if ((unsigned)len &gt;= size)
        		die(_("protocol error: bad line length %d"), len);
        	if (get_packet_data(fd, src_buffer, src_len, buffer, len, options) &lt; 0) {
        		*pktlen = -1;
        		return PACKET_READ_EOF;
        	}
        	if ((options &amp; PACKET_READ_CHOMP_NEWLINE) &amp;&amp;
        	    len &amp;&amp; buffer[len-1] == '\n')
        		len--;
        	buffer[len] = 0;
        	packet_trace(buffer, len, 0);
        	if ((options &amp; PACKET_READ_DIE_ON_ERR_PACKET) &amp;&amp;
        	    starts_with(buffer, "ERR "))
        		die(_("remote error: %s"), buffer + 4);
        	*pktlen = len;
        	return PACKET_READ_NORMAL;
        }
        int packet_read(int fd, char **src_buffer, size_t *src_len,
        		char *buffer, unsigned size, int options)
        {
        	int pktlen = -1;
        	packet_read_with_status(fd, src_buffer, src_len, buffer, size,
        				&amp;pktlen, options);
        	return pktlen;
        }
        static char *packet_read_line_generic(int fd,
        				      char **src, size_t *src_len,
        				      int *dst_len)
        {
        	int len = packet_read(fd, src, src_len,
        			      packet_buffer, sizeof(packet_buffer),
        			      PACKET_READ_CHOMP_NEWLINE);
        	if (dst_len)
        		*dst_len = len;
        	return (len &gt; 0) ? packet_buffer : NULL;
        }
        char *packet_read_line(int fd, int *len_p)
        {
        	return packet_read_line_generic(fd, NULL, NULL, len_p);
        }
        int packet_read_line_gently(int fd, int *dst_len, char **dst_line)
        {
        	int len = packet_read(fd, NULL, NULL,
        			      packet_buffer, sizeof(packet_buffer),
        			      PACKET_READ_CHOMP_NEWLINE|PACKET_READ_GENTLE_ON_EOF);
        	if (dst_len)
        		*dst_len = len;
        	if (dst_line)
        		*dst_line = (len &gt; 0) ? packet_buffer : NULL;
        	return len;
        }
        char *packet_read_line_buf(char **src, size_t *src_len, int *dst_len)
        {
        	return packet_read_line_generic(-1, src, src_len, dst_len);
        }
        ssize_t read_packetized_to_strbuf(int fd_in, struct strbuf *sb_out)
        {
        	int packet_len;
        	size_t orig_len = sb_out-&gt;len;
        	size_t orig_alloc = sb_out-&gt;alloc;
        	for (;;) {
        		strbuf_grow(sb_out, LARGE_PACKET_DATA_MAX);
        		packet_len = packet_read(fd_in, NULL, NULL,
        			/* strbuf_grow() above always allocates one extra byte to
        			 * store a '\0' at the end of the string. packet_read()
        			 * writes a '\0' extra byte at the end, too. Let it know
        			 * that there is already room for the extra byte.
        			 */
        			sb_out-&gt;buf + sb_out-&gt;len, LARGE_PACKET_DATA_MAX+1,
        			PACKET_READ_GENTLE_ON_EOF);
        		if (packet_len &lt;= 0)
        			break;
        		sb_out-&gt;len += packet_len;
        	}
        	if (packet_len &lt; 0) {
        		if (orig_alloc == 0)
        			strbuf_release(sb_out);
        		else
        			strbuf_setlen(sb_out, orig_len);
        		return packet_len;
        	}
        	return sb_out-&gt;len - orig_len;
        }
        int recv_sideband(const char *me, int in_stream, int out)
        {
        	char buf[LARGE_PACKET_MAX + 1];
        	int len;
        	struct strbuf scratch = STRBUF_INIT;
        	enum sideband_type sideband_type;
        	while (1) {
        		len = packet_read(in_stream, NULL, NULL, buf, LARGE_PACKET_MAX,
        				  0);
        		if (!demultiplex_sideband(me, buf, len, 0, &amp;scratch,
        					  &amp;sideband_type))
        			continue;
        		switch (sideband_type) {
        		case SIDEBAND_PRIMARY:
        			write_or_die(out, buf + 1, len - 1);
        			break;
        		default: /* errors: message already written */
        			return sideband_type;
        		}
        	}
        }
        /* Packet Reader Functions */
        void packet_reader_init(struct packet_reader *reader, int fd,
        			char *src_buffer, size_t src_len,
        			int options)
        {
        	memset(reader, 0, sizeof(*reader));
        	reader-&gt;fd = fd;
        	reader-&gt;src_buffer = src_buffer;
        	reader-&gt;src_len = src_len;
        	reader-&gt;buffer = packet_buffer;
        	reader-&gt;buffer_size = sizeof(packet_buffer);
        	reader-&gt;options = options;
        	reader-&gt;me = "git";
        }
        enum packet_read_status packet_reader_read(struct packet_reader *reader)
        {
        	struct strbuf scratch = STRBUF_INIT;
        	if (reader-&gt;line_peeked) {
        		reader-&gt;line_peeked = 0;
        		return reader-&gt;status;
        	}
        	/*
        	 * Consume all progress packets until a primary payload packet is
        	 * received
        	 */
        	while (1) {
        		enum sideband_type sideband_type;
        		reader-&gt;status = packet_read_with_status(reader-&gt;fd,
        							 &amp;reader-&gt;src_buffer,
        							 &amp;reader-&gt;src_len,
        							 reader-&gt;buffer,
        							 reader-&gt;buffer_size,
        							 &amp;reader-&gt;pktlen,
        							 reader-&gt;options);
        		if (!reader-&gt;use_sideband)
        			break;
        		if (demultiplex_sideband(reader-&gt;me, reader-&gt;buffer,
        					 reader-&gt;pktlen, 1, &amp;scratch,
        					 &amp;sideband_type))
        			break;
        	}
        	if (reader-&gt;status == PACKET_READ_NORMAL)
        		/* Skip the sideband designator if sideband is used */
        		reader-&gt;line = reader-&gt;use_sideband ?
        			reader-&gt;buffer + 1 : reader-&gt;buffer;
        	else
        		reader-&gt;line = NULL;
        	return reader-&gt;status;
        }
        enum packet_read_status packet_reader_peek(struct packet_reader *reader)
        {
        	/* Only allow peeking a single line */
        	if (reader-&gt;line_peeked)
        		return reader-&gt;status;
        	/* Peek a line by reading it and setting peeked flag */
        	packet_reader_read(reader);
        	reader-&gt;line_peeked = 1;
        	return reader-&gt;status;
        }
        void packet_writer_init(struct packet_writer *writer, int dest_fd)
        {
        	writer-&gt;dest_fd = dest_fd;
        	writer-&gt;use_sideband = 0;
        }
        void packet_writer_write(struct packet_writer *writer, const char *fmt, ...)
        {
        	va_list args;
        	va_start(args, fmt);
        	packet_write_fmt_1(writer-&gt;dest_fd, 0,
        			   writer-&gt;use_sideband ? "\001" : "", fmt, args);
        	va_end(args);
        }
        void packet_writer_error(struct packet_writer *writer, const char *fmt, ...)
        {
        	va_list args;
        	va_start(args, fmt);
        	packet_write_fmt_1(writer-&gt;dest_fd, 0,
        			   writer-&gt;use_sideband ? "\003" : "ERR ", fmt, args);
        	va_end(args);
        }
        void packet_writer_delim(struct packet_writer *writer)
        {
        	packet_delim(writer-&gt;dest_fd);
        }
        void packet_writer_flush(struct packet_writer *writer)
        {
        	packet_flush(writer-&gt;dest_fd);
        }
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
