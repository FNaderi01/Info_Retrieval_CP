      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/split-index.c
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      473 lines (434 sloc)
    13.6 KB
      Raw
        Blame
        #include "cache.h"
        #include "split-index.h"
        #include "ewah/ewok.h"
        struct split_index *init_split_index(struct index_state *istate)
        {
        	if (!istate-&gt;split_index) {
        		istate-&gt;split_index = xcalloc(1, sizeof(*istate-&gt;split_index));
        		istate-&gt;split_index-&gt;refcount = 1;
        	}
        	return istate-&gt;split_index;
        }
        int read_link_extension(struct index_state *istate,
        			 const void *data_, unsigned long sz)
        {
        	const unsigned char *data = data_;
        	struct split_index *si;
        	int ret;
        	if (sz &lt; the_hash_algo-&gt;rawsz)
        		return error("corrupt link extension (too short)");
        	si = init_split_index(istate);
        	hashcpy(si-&gt;base_oid.hash, data);
        	data += the_hash_algo-&gt;rawsz;
        	sz -= the_hash_algo-&gt;rawsz;
        	if (!sz)
        		return 0;
        	si-&gt;delete_bitmap = ewah_new();
        	ret = ewah_read_mmap(si-&gt;delete_bitmap, data, sz);
        	if (ret &lt; 0)
        		return error("corrupt delete bitmap in link extension");
        	data += ret;
        	sz -= ret;
        	si-&gt;replace_bitmap = ewah_new();
        	ret = ewah_read_mmap(si-&gt;replace_bitmap, data, sz);
        	if (ret &lt; 0)
        		return error("corrupt replace bitmap in link extension");
        	if (ret != sz)
        		return error("garbage at the end of link extension");
        	return 0;
        }
        int write_link_extension(struct strbuf *sb,
        			 struct index_state *istate)
        {
        	struct split_index *si = istate-&gt;split_index;
        	strbuf_add(sb, si-&gt;base_oid.hash, the_hash_algo-&gt;rawsz);
        	if (!si-&gt;delete_bitmap &amp;&amp; !si-&gt;replace_bitmap)
        		return 0;
        	ewah_serialize_strbuf(si-&gt;delete_bitmap, sb);
        	ewah_serialize_strbuf(si-&gt;replace_bitmap, sb);
        	return 0;
        }
        static void mark_base_index_entries(struct index_state *base)
        {
        	int i;
        	/*
        	 * To keep track of the shared entries between
        	 * istate-&gt;base-&gt;cache[] and istate-&gt;cache[], base entry
        	 * position is stored in each base entry. All positions start
        	 * from 1 instead of 0, which is reserved to say "this is a new
        	 * entry".
        	 */
        	for (i = 0; i &lt; base-&gt;cache_nr; i++)
        		base-&gt;cache[i]-&gt;index = i + 1;
        }
        void move_cache_to_base_index(struct index_state *istate)
        {
        	struct split_index *si = istate-&gt;split_index;
        	int i;
        	/*
        	 * If there was a previous base index, then transfer ownership of allocated
        	 * entries to the parent index.
        	 */
        	if (si-&gt;base &amp;&amp;
        		si-&gt;base-&gt;ce_mem_pool) {
        		if (!istate-&gt;ce_mem_pool)
        			mem_pool_init(&amp;istate-&gt;ce_mem_pool, 0);
        		mem_pool_combine(istate-&gt;ce_mem_pool, istate-&gt;split_index-&gt;base-&gt;ce_mem_pool);
        	}
        	si-&gt;base = xcalloc(1, sizeof(*si-&gt;base));
        	si-&gt;base-&gt;version = istate-&gt;version;
        	/* zero timestamp disables racy test in ce_write_index() */
        	si-&gt;base-&gt;timestamp = istate-&gt;timestamp;
        	ALLOC_GROW(si-&gt;base-&gt;cache, istate-&gt;cache_nr, si-&gt;base-&gt;cache_alloc);
        	si-&gt;base-&gt;cache_nr = istate-&gt;cache_nr;
        	/*
        	 * The mem_pool needs to move with the allocated entries.
        	 */
        	si-&gt;base-&gt;ce_mem_pool = istate-&gt;ce_mem_pool;
        	istate-&gt;ce_mem_pool = NULL;
        	COPY_ARRAY(si-&gt;base-&gt;cache, istate-&gt;cache, istate-&gt;cache_nr);
        	mark_base_index_entries(si-&gt;base);
        	for (i = 0; i &lt; si-&gt;base-&gt;cache_nr; i++)
        		si-&gt;base-&gt;cache[i]-&gt;ce_flags &amp;= ~CE_UPDATE_IN_BASE;
        }
        static void mark_entry_for_delete(size_t pos, void *data)
        {
        	struct index_state *istate = data;
        	if (pos &gt;= istate-&gt;cache_nr)
        		die("position for delete %d exceeds base index size %d",
        		    (int)pos, istate-&gt;cache_nr);
        	istate-&gt;cache[pos]-&gt;ce_flags |= CE_REMOVE;
        	istate-&gt;split_index-&gt;nr_deletions++;
        }
        static void replace_entry(size_t pos, void *data)
        {
        	struct index_state *istate = data;
        	struct split_index *si = istate-&gt;split_index;
        	struct cache_entry *dst, *src;
        	if (pos &gt;= istate-&gt;cache_nr)
        		die("position for replacement %d exceeds base index size %d",
        		    (int)pos, istate-&gt;cache_nr);
        	if (si-&gt;nr_replacements &gt;= si-&gt;saved_cache_nr)
        		die("too many replacements (%d vs %d)",
        		    si-&gt;nr_replacements, si-&gt;saved_cache_nr);
        	dst = istate-&gt;cache[pos];
        	if (dst-&gt;ce_flags &amp; CE_REMOVE)
        		die("entry %d is marked as both replaced and deleted",
        		    (int)pos);
        	src = si-&gt;saved_cache[si-&gt;nr_replacements];
        	if (ce_namelen(src))
        		die("corrupt link extension, entry %d should have "
        		    "zero length name", (int)pos);
        	src-&gt;index = pos + 1;
        	src-&gt;ce_flags |= CE_UPDATE_IN_BASE;
        	src-&gt;ce_namelen = dst-&gt;ce_namelen;
        	copy_cache_entry(dst, src);
        	discard_cache_entry(src);
        	si-&gt;nr_replacements++;
        }
        void merge_base_index(struct index_state *istate)
        {
        	struct split_index *si = istate-&gt;split_index;
        	unsigned int i;
        	mark_base_index_entries(si-&gt;base);
        	si-&gt;saved_cache	    = istate-&gt;cache;
        	si-&gt;saved_cache_nr  = istate-&gt;cache_nr;
        	istate-&gt;cache_nr    = si-&gt;base-&gt;cache_nr;
        	istate-&gt;cache	    = NULL;
        	istate-&gt;cache_alloc = 0;
        	ALLOC_GROW(istate-&gt;cache, istate-&gt;cache_nr, istate-&gt;cache_alloc);
        	COPY_ARRAY(istate-&gt;cache, si-&gt;base-&gt;cache, istate-&gt;cache_nr);
        	si-&gt;nr_deletions = 0;
        	si-&gt;nr_replacements = 0;
        	ewah_each_bit(si-&gt;replace_bitmap, replace_entry, istate);
        	ewah_each_bit(si-&gt;delete_bitmap, mark_entry_for_delete, istate);
        	if (si-&gt;nr_deletions)
        		remove_marked_cache_entries(istate, 0);
        	for (i = si-&gt;nr_replacements; i &lt; si-&gt;saved_cache_nr; i++) {
        		if (!ce_namelen(si-&gt;saved_cache[i]))
        			die("corrupt link extension, entry %d should "
        			    "have non-zero length name", i);
        		add_index_entry(istate, si-&gt;saved_cache[i],
        				ADD_CACHE_OK_TO_ADD |
        				ADD_CACHE_KEEP_CACHE_TREE |
        				/*
        				 * we may have to replay what
        				 * merge-recursive.c:update_stages()
        				 * does, which has this flag on
        				 */
        				ADD_CACHE_SKIP_DFCHECK);
        		si-&gt;saved_cache[i] = NULL;
        	}
        	ewah_free(si-&gt;delete_bitmap);
        	ewah_free(si-&gt;replace_bitmap);
        	FREE_AND_NULL(si-&gt;saved_cache);
        	si-&gt;delete_bitmap  = NULL;
        	si-&gt;replace_bitmap = NULL;
        	si-&gt;saved_cache_nr = 0;
        }
        /*
         * Compare most of the fields in two cache entries, i.e. all except the
         * hashmap_entry and the name.
         */
        static int compare_ce_content(struct cache_entry *a, struct cache_entry *b)
        {
        	const unsigned int ondisk_flags = CE_STAGEMASK | CE_VALID |
        					  CE_EXTENDED_FLAGS;
        	unsigned int ce_flags = a-&gt;ce_flags;
        	unsigned int base_flags = b-&gt;ce_flags;
        	int ret;
        	/* only on-disk flags matter */
        	a-&gt;ce_flags &amp;= ondisk_flags;
        	b-&gt;ce_flags &amp;= ondisk_flags;
        	ret = memcmp(&amp;a-&gt;ce_stat_data, &amp;b-&gt;ce_stat_data,
        		     offsetof(struct cache_entry, name) -
        		     offsetof(struct cache_entry, ce_stat_data));
        	a-&gt;ce_flags = ce_flags;
        	b-&gt;ce_flags = base_flags;
        	return ret;
        }
        void prepare_to_write_split_index(struct index_state *istate)
        {
        	struct split_index *si = init_split_index(istate);
        	struct cache_entry **entries = NULL, *ce;
        	int i, nr_entries = 0, nr_alloc = 0;
        	si-&gt;delete_bitmap = ewah_new();
        	si-&gt;replace_bitmap = ewah_new();
        	if (si-&gt;base) {
        		/* Go through istate-&gt;cache[] and mark CE_MATCHED to
        		 * entry with positive index. We'll go through
        		 * base-&gt;cache[] later to delete all entries in base
        		 * that are not marked with either CE_MATCHED or
        		 * CE_UPDATE_IN_BASE. If istate-&gt;cache[i] is a
        		 * duplicate, deduplicate it.
        		 */
        		for (i = 0; i &lt; istate-&gt;cache_nr; i++) {
        			struct cache_entry *base;
        			ce = istate-&gt;cache[i];
        			if (!ce-&gt;index) {
        				/*
        				 * During simple update index operations this
        				 * is a cache entry that is not present in
        				 * the shared index.  It will be added to the
        				 * split index.
        				 *
        				 * However, it might also represent a file
        				 * that already has a cache entry in the
        				 * shared index, but a new index has just
        				 * been constructed by unpack_trees(), and
        				 * this entry now refers to different content
        				 * than what was recorded in the original
        				 * index, e.g. during 'read-tree -m HEAD^' or
        				 * 'checkout HEAD^'.  In this case the
        				 * original entry in the shared index will be
        				 * marked as deleted, and this entry will be
        				 * added to the split index.
        				 */
        				continue;
        			}
        			if (ce-&gt;index &gt; si-&gt;base-&gt;cache_nr) {
        				BUG("ce refers to a shared ce at %d, which is beyond the shared index size %d",
        				    ce-&gt;index, si-&gt;base-&gt;cache_nr);
        			}
        			ce-&gt;ce_flags |= CE_MATCHED; /* or "shared" */
        			base = si-&gt;base-&gt;cache[ce-&gt;index - 1];
        			if (ce == base) {
        				/* The entry is present in the shared index. */
        				if (ce-&gt;ce_flags &amp; CE_UPDATE_IN_BASE) {
        					/*
        					 * Already marked for inclusion in
        					 * the split index, either because
        					 * the corresponding file was
        					 * modified and the cached stat data
        					 * was refreshed, or because there
        					 * is already a replacement entry in
        					 * the split index.
        					 * Nothing more to do here.
        					 */
        				} else if (!ce_uptodate(ce) &amp;&amp;
        					   is_racy_timestamp(istate, ce)) {
        					/*
        					 * A racily clean cache entry stored
        					 * only in the shared index: it must
        					 * be added to the split index, so
        					 * the subsequent do_write_index()
        					 * can smudge its stat data.
        					 */
        					ce-&gt;ce_flags |= CE_UPDATE_IN_BASE;
        				} else {
        					/*
        					 * The entry is only present in the
        					 * shared index and it was not
        					 * refreshed.
        					 * Just leave it there.
        					 */
        				}
        				continue;
        			}
        			if (ce-&gt;ce_namelen != base-&gt;ce_namelen ||
        			    strcmp(ce-&gt;name, base-&gt;name)) {
        				ce-&gt;index = 0;
        				continue;
        			}
        			/*
        			 * This is the copy of a cache entry that is present
        			 * in the shared index, created by unpack_trees()
        			 * while it constructed a new index.
        			 */
        			if (ce-&gt;ce_flags &amp; CE_UPDATE_IN_BASE) {
        				/*
        				 * Already marked for inclusion in the split
        				 * index, either because the corresponding
        				 * file was modified and the cached stat data
        				 * was refreshed, or because the original
        				 * entry already had a replacement entry in
        				 * the split index.
        				 * Nothing to do.
        				 */
        			} else if (!ce_uptodate(ce) &amp;&amp;
        				   is_racy_timestamp(istate, ce)) {
        				/*
        				 * A copy of a racily clean cache entry from
        				 * the shared index.  It must be added to
        				 * the split index, so the subsequent
        				 * do_write_index() can smudge its stat data.
        				 */
        				ce-&gt;ce_flags |= CE_UPDATE_IN_BASE;
        			} else {
        				/*
        				 * Thoroughly compare the cached data to see
        				 * whether it should be marked for inclusion
        				 * in the split index.
        				 *
        				 * This comparison might be unnecessary, as
        				 * code paths modifying the cached data do
        				 * set CE_UPDATE_IN_BASE as well.
        				 */
        				if (compare_ce_content(ce, base))
        					ce-&gt;ce_flags |= CE_UPDATE_IN_BASE;
        			}
        			discard_cache_entry(base);
        			si-&gt;base-&gt;cache[ce-&gt;index - 1] = ce;
        		}
        		for (i = 0; i &lt; si-&gt;base-&gt;cache_nr; i++) {
        			ce = si-&gt;base-&gt;cache[i];
        			if ((ce-&gt;ce_flags &amp; CE_REMOVE) ||
        			    !(ce-&gt;ce_flags &amp; CE_MATCHED))
        				ewah_set(si-&gt;delete_bitmap, i);
        			else if (ce-&gt;ce_flags &amp; CE_UPDATE_IN_BASE) {
        				ewah_set(si-&gt;replace_bitmap, i);
        				ce-&gt;ce_flags |= CE_STRIP_NAME;
        				ALLOC_GROW(entries, nr_entries+1, nr_alloc);
        				entries[nr_entries++] = ce;
        			}
        			if (is_null_oid(&amp;ce-&gt;oid))
        				istate-&gt;drop_cache_tree = 1;
        		}
        	}
        	for (i = 0; i &lt; istate-&gt;cache_nr; i++) {
        		ce = istate-&gt;cache[i];
        		if ((!si-&gt;base || !ce-&gt;index) &amp;&amp; !(ce-&gt;ce_flags &amp; CE_REMOVE)) {
        			assert(!(ce-&gt;ce_flags &amp; CE_STRIP_NAME));
        			ALLOC_GROW(entries, nr_entries+1, nr_alloc);
        			entries[nr_entries++] = ce;
        		}
        		ce-&gt;ce_flags &amp;= ~CE_MATCHED;
        	}
        	/*
        	 * take cache[] out temporarily, put entries[] in its place
        	 * for writing
        	 */
        	si-&gt;saved_cache = istate-&gt;cache;
        	si-&gt;saved_cache_nr = istate-&gt;cache_nr;
        	istate-&gt;cache = entries;
        	istate-&gt;cache_nr = nr_entries;
        }
        void finish_writing_split_index(struct index_state *istate)
        {
        	struct split_index *si = init_split_index(istate);
        	ewah_free(si-&gt;delete_bitmap);
        	ewah_free(si-&gt;replace_bitmap);
        	si-&gt;delete_bitmap = NULL;
        	si-&gt;replace_bitmap = NULL;
        	free(istate-&gt;cache);
        	istate-&gt;cache = si-&gt;saved_cache;
        	istate-&gt;cache_nr = si-&gt;saved_cache_nr;
        }
        void discard_split_index(struct index_state *istate)
        {
        	struct split_index *si = istate-&gt;split_index;
        	if (!si)
        		return;
        	istate-&gt;split_index = NULL;
        	si-&gt;refcount--;
        	if (si-&gt;refcount)
        		return;
        	if (si-&gt;base) {
        		discard_index(si-&gt;base);
        		free(si-&gt;base);
        	}
        	free(si);
        }
        void save_or_free_index_entry(struct index_state *istate, struct cache_entry *ce)
        {
        	if (ce-&gt;index &amp;&amp;
        	    istate-&gt;split_index &amp;&amp;
        	    istate-&gt;split_index-&gt;base &amp;&amp;
        	    ce-&gt;index &lt;= istate-&gt;split_index-&gt;base-&gt;cache_nr &amp;&amp;
        	    ce == istate-&gt;split_index-&gt;base-&gt;cache[ce-&gt;index - 1])
        		ce-&gt;ce_flags |= CE_REMOVE;
        	else
        		discard_cache_entry(ce);
        }
        void replace_index_entry_in_base(struct index_state *istate,
        				 struct cache_entry *old_entry,
        				 struct cache_entry *new_entry)
        {
        	if (old_entry-&gt;index &amp;&amp;
        	    istate-&gt;split_index &amp;&amp;
        	    istate-&gt;split_index-&gt;base &amp;&amp;
        	    old_entry-&gt;index &lt;= istate-&gt;split_index-&gt;base-&gt;cache_nr) {
        		new_entry-&gt;index = old_entry-&gt;index;
        		if (old_entry != istate-&gt;split_index-&gt;base-&gt;cache[new_entry-&gt;index - 1])
        			discard_cache_entry(istate-&gt;split_index-&gt;base-&gt;cache[new_entry-&gt;index - 1]);
        		istate-&gt;split_index-&gt;base-&gt;cache[new_entry-&gt;index - 1] = new_entry;
        	}
        }
        void add_split_index(struct index_state *istate)
        {
        	if (!istate-&gt;split_index) {
        		init_split_index(istate);
        		istate-&gt;cache_changed |= SPLIT_INDEX_ORDERED;
        	}
        }
        void remove_split_index(struct index_state *istate)
        {
        	if (istate-&gt;split_index) {
        		if (istate-&gt;split_index-&gt;base) {
        			/*
        			 * When removing the split index, we need to move
        			 * ownership of the mem_pool associated with the
        			 * base index to the main index. There may be cache entries
        			 * allocated from the base's memory pool that are shared with
        			 * the_index.cache[].
        			 */
        			mem_pool_combine(istate-&gt;ce_mem_pool,
        					 istate-&gt;split_index-&gt;base-&gt;ce_mem_pool);
        			/*
        			 * The split index no longer owns the mem_pool backing
        			 * its cache array. As we are discarding this index,
        			 * mark the index as having no cache entries, so it
        			 * will not attempt to clean up the cache entries or
        			 * validate them.
        			 */
        			istate-&gt;split_index-&gt;base-&gt;cache_nr = 0;
        		}
        		/*
        		 * We can discard the split index because its
        		 * memory pool has been incorporated into the
        		 * memory pool associated with the the_index.
        		 */
        		discard_split_index(istate);
        		istate-&gt;cache_changed |= SOMETHING_CHANGED;
        	}
        }
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
