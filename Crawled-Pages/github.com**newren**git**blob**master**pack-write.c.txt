      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/pack-write.c
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      379 lines (333 sloc)
    10.7 KB
      Raw
        Blame
        #include "cache.h"
        #include "pack.h"
        #include "csum-file.h"
        void reset_pack_idx_option(struct pack_idx_option *opts)
        {
        	memset(opts, 0, sizeof(*opts));
        	opts-&gt;version = 2;
        	opts-&gt;off32_limit = 0x7fffffff;
        }
        static int sha1_compare(const void *_a, const void *_b)
        {
        	struct pack_idx_entry *a = *(struct pack_idx_entry **)_a;
        	struct pack_idx_entry *b = *(struct pack_idx_entry **)_b;
        	return oidcmp(&amp;a-&gt;oid, &amp;b-&gt;oid);
        }
        static int cmp_uint32(const void *a_, const void *b_)
        {
        	uint32_t a = *((uint32_t *)a_);
        	uint32_t b = *((uint32_t *)b_);
        	return (a &lt; b) ? -1 : (a != b);
        }
        static int need_large_offset(off_t offset, const struct pack_idx_option *opts)
        {
        	uint32_t ofsval;
        	if ((offset &gt;&gt; 31) || (opts-&gt;off32_limit &lt; offset))
        		return 1;
        	if (!opts-&gt;anomaly_nr)
        		return 0;
        	ofsval = offset;
        	return !!bsearch(&amp;ofsval, opts-&gt;anomaly, opts-&gt;anomaly_nr,
        			 sizeof(ofsval), cmp_uint32);
        }
        /*
         * On entry *sha1 contains the pack content SHA1 hash, on exit it is
         * the SHA1 hash of sorted object names. The objects array passed in
         * will be sorted by SHA1 on exit.
         */
        const char *write_idx_file(const char *index_name, struct pack_idx_entry **objects,
        			   int nr_objects, const struct pack_idx_option *opts,
        			   const unsigned char *sha1)
        {
        	struct hashfile *f;
        	struct pack_idx_entry **sorted_by_sha, **list, **last;
        	off_t last_obj_offset = 0;
        	uint32_t array[256];
        	int i, fd;
        	uint32_t index_version;
        	if (nr_objects) {
        		sorted_by_sha = objects;
        		list = sorted_by_sha;
        		last = sorted_by_sha + nr_objects;
        		for (i = 0; i &lt; nr_objects; ++i) {
        			if (objects[i]-&gt;offset &gt; last_obj_offset)
        				last_obj_offset = objects[i]-&gt;offset;
        		}
        		QSORT(sorted_by_sha, nr_objects, sha1_compare);
        	}
        	else
        		sorted_by_sha = list = last = NULL;
        	if (opts-&gt;flags &amp; WRITE_IDX_VERIFY) {
        		assert(index_name);
        		f = hashfd_check(index_name);
        	} else {
        		if (!index_name) {
        			struct strbuf tmp_file = STRBUF_INIT;
        			fd = odb_mkstemp(&amp;tmp_file, "pack/tmp_idx_XXXXXX");
        			index_name = strbuf_detach(&amp;tmp_file, NULL);
        		} else {
        			unlink(index_name);
        			fd = open(index_name, O_CREAT|O_EXCL|O_WRONLY, 0600);
        			if (fd &lt; 0)
        				die_errno("unable to create '%s'", index_name);
        		}
        		f = hashfd(fd, index_name);
        	}
        	/* if last object's offset is &gt;= 2^31 we should use index V2 */
        	index_version = need_large_offset(last_obj_offset, opts) ? 2 : opts-&gt;version;
        	/* index versions 2 and above need a header */
        	if (index_version &gt;= 2) {
        		struct pack_idx_header hdr;
        		hdr.idx_signature = htonl(PACK_IDX_SIGNATURE);
        		hdr.idx_version = htonl(index_version);
        		hashwrite(f, &amp;hdr, sizeof(hdr));
        	}
        	/*
        	 * Write the first-level table (the list is sorted,
        	 * but we use a 256-entry lookup to be able to avoid
        	 * having to do eight extra binary search iterations).
        	 */
        	for (i = 0; i &lt; 256; i++) {
        		struct pack_idx_entry **next = list;
        		while (next &lt; last) {
        			struct pack_idx_entry *obj = *next;
        			if (obj-&gt;oid.hash[0] != i)
        				break;
        			next++;
        		}
        		array[i] = htonl(next - sorted_by_sha);
        		list = next;
        	}
        	hashwrite(f, array, 256 * 4);
        	/*
        	 * Write the actual SHA1 entries..
        	 */
        	list = sorted_by_sha;
        	for (i = 0; i &lt; nr_objects; i++) {
        		struct pack_idx_entry *obj = *list++;
        		if (index_version &lt; 2) {
        			uint32_t offset = htonl(obj-&gt;offset);
        			hashwrite(f, &amp;offset, 4);
        		}
        		hashwrite(f, obj-&gt;oid.hash, the_hash_algo-&gt;rawsz);
        		if ((opts-&gt;flags &amp; WRITE_IDX_STRICT) &amp;&amp;
        		    (i &amp;&amp; oideq(&amp;list[-2]-&gt;oid, &amp;obj-&gt;oid)))
        			die("The same object %s appears twice in the pack",
        			    oid_to_hex(&amp;obj-&gt;oid));
        	}
        	if (index_version &gt;= 2) {
        		unsigned int nr_large_offset = 0;
        		/* write the crc32 table */
        		list = sorted_by_sha;
        		for (i = 0; i &lt; nr_objects; i++) {
        			struct pack_idx_entry *obj = *list++;
        			uint32_t crc32_val = htonl(obj-&gt;crc32);
        			hashwrite(f, &amp;crc32_val, 4);
        		}
        		/* write the 32-bit offset table */
        		list = sorted_by_sha;
        		for (i = 0; i &lt; nr_objects; i++) {
        			struct pack_idx_entry *obj = *list++;
        			uint32_t offset;
        			offset = (need_large_offset(obj-&gt;offset, opts)
        				  ? (0x80000000 | nr_large_offset++)
        				  : obj-&gt;offset);
        			offset = htonl(offset);
        			hashwrite(f, &amp;offset, 4);
        		}
        		/* write the large offset table */
        		list = sorted_by_sha;
        		while (nr_large_offset) {
        			struct pack_idx_entry *obj = *list++;
        			uint64_t offset = obj-&gt;offset;
        			uint32_t split[2];
        			if (!need_large_offset(offset, opts))
        				continue;
        			split[0] = htonl(offset &gt;&gt; 32);
        			split[1] = htonl(offset &amp; 0xffffffff);
        			hashwrite(f, split, 8);
        			nr_large_offset--;
        		}
        	}
        	hashwrite(f, sha1, the_hash_algo-&gt;rawsz);
        	finalize_hashfile(f, NULL, CSUM_HASH_IN_STREAM | CSUM_CLOSE |
        				    ((opts-&gt;flags &amp; WRITE_IDX_VERIFY)
        				    ? 0 : CSUM_FSYNC));
        	return index_name;
        }
        off_t write_pack_header(struct hashfile *f, uint32_t nr_entries)
        {
        	struct pack_header hdr;
        	hdr.hdr_signature = htonl(PACK_SIGNATURE);
        	hdr.hdr_version = htonl(PACK_VERSION);
        	hdr.hdr_entries = htonl(nr_entries);
        	hashwrite(f, &amp;hdr, sizeof(hdr));
        	return sizeof(hdr);
        }
        /*
         * Update pack header with object_count and compute new SHA1 for pack data
         * associated to pack_fd, and write that SHA1 at the end.  That new SHA1
         * is also returned in new_pack_sha1.
         *
         * If partial_pack_sha1 is non null, then the SHA1 of the existing pack
         * (without the header update) is computed and validated against the
         * one provided in partial_pack_sha1.  The validation is performed at
         * partial_pack_offset bytes in the pack file.  The SHA1 of the remaining
         * data (i.e. from partial_pack_offset to the end) is then computed and
         * returned in partial_pack_sha1.
         *
         * Note that new_pack_sha1 is updated last, so both new_pack_sha1 and
         * partial_pack_sha1 can refer to the same buffer if the caller is not
         * interested in the resulting SHA1 of pack data above partial_pack_offset.
         */
        void fixup_pack_header_footer(int pack_fd,
        			 unsigned char *new_pack_hash,
        			 const char *pack_name,
        			 uint32_t object_count,
        			 unsigned char *partial_pack_hash,
        			 off_t partial_pack_offset)
        {
        	int aligned_sz, buf_sz = 8 * 1024;
        	git_hash_ctx old_hash_ctx, new_hash_ctx;
        	struct pack_header hdr;
        	char *buf;
        	ssize_t read_result;
        	the_hash_algo-&gt;init_fn(&amp;old_hash_ctx);
        	the_hash_algo-&gt;init_fn(&amp;new_hash_ctx);
        	if (lseek(pack_fd, 0, SEEK_SET) != 0)
        		die_errno("Failed seeking to start of '%s'", pack_name);
        	read_result = read_in_full(pack_fd, &amp;hdr, sizeof(hdr));
        	if (read_result &lt; 0)
        		die_errno("Unable to reread header of '%s'", pack_name);
        	else if (read_result != sizeof(hdr))
        		die_errno("Unexpected short read for header of '%s'",
        			  pack_name);
        	if (lseek(pack_fd, 0, SEEK_SET) != 0)
        		die_errno("Failed seeking to start of '%s'", pack_name);
        	the_hash_algo-&gt;update_fn(&amp;old_hash_ctx, &amp;hdr, sizeof(hdr));
        	hdr.hdr_entries = htonl(object_count);
        	the_hash_algo-&gt;update_fn(&amp;new_hash_ctx, &amp;hdr, sizeof(hdr));
        	write_or_die(pack_fd, &amp;hdr, sizeof(hdr));
        	partial_pack_offset -= sizeof(hdr);
        	buf = xmalloc(buf_sz);
        	aligned_sz = buf_sz - sizeof(hdr);
        	for (;;) {
        		ssize_t m, n;
        		m = (partial_pack_hash &amp;&amp; partial_pack_offset &lt; aligned_sz) ?
        			partial_pack_offset : aligned_sz;
        		n = xread(pack_fd, buf, m);
        		if (!n)
        			break;
        		if (n &lt; 0)
        			die_errno("Failed to checksum '%s'", pack_name);
        		the_hash_algo-&gt;update_fn(&amp;new_hash_ctx, buf, n);
        		aligned_sz -= n;
        		if (!aligned_sz)
        			aligned_sz = buf_sz;
        		if (!partial_pack_hash)
        			continue;
        		the_hash_algo-&gt;update_fn(&amp;old_hash_ctx, buf, n);
        		partial_pack_offset -= n;
        		if (partial_pack_offset == 0) {
        			unsigned char hash[GIT_MAX_RAWSZ];
        			the_hash_algo-&gt;final_fn(hash, &amp;old_hash_ctx);
        			if (!hasheq(hash, partial_pack_hash))
        				die("Unexpected checksum for %s "
        				    "(disk corruption?)", pack_name);
        			/*
        			 * Now let's compute the SHA1 of the remainder of the
        			 * pack, which also means making partial_pack_offset
        			 * big enough not to matter anymore.
        			 */
        			the_hash_algo-&gt;init_fn(&amp;old_hash_ctx);
        			partial_pack_offset = ~partial_pack_offset;
        			partial_pack_offset -= MSB(partial_pack_offset, 1);
        		}
        	}
        	free(buf);
        	if (partial_pack_hash)
        		the_hash_algo-&gt;final_fn(partial_pack_hash, &amp;old_hash_ctx);
        	the_hash_algo-&gt;final_fn(new_pack_hash, &amp;new_hash_ctx);
        	write_or_die(pack_fd, new_pack_hash, the_hash_algo-&gt;rawsz);
        	fsync_or_die(pack_fd, pack_name);
        }
        char *index_pack_lockfile(int ip_out)
        {
        	char packname[GIT_MAX_HEXSZ + 6];
        	const int len = the_hash_algo-&gt;hexsz + 6;
        	/*
        	 * The first thing we expect from index-pack's output
        	 * is "pack\t%40s\n" or "keep\t%40s\n" (46 bytes) where
        	 * %40s is the newly created pack SHA1 name.  In the "keep"
        	 * case, we need it to remove the corresponding .keep file
        	 * later on.  If we don't get that then tough luck with it.
        	 */
        	if (read_in_full(ip_out, packname, len) == len &amp;&amp; packname[len-1] == '\n') {
        		const char *name;
        		packname[len-1] = 0;
        		if (skip_prefix(packname, "keep\t", &amp;name))
        			return xstrfmt("%s/pack/pack-%s.keep",
        				       get_object_directory(), name);
        	}
        	return NULL;
        }
        /*
         * The per-object header is a pretty dense thing, which is
         *  - first byte: low four bits are "size", then three bits of "type",
         *    and the high bit is "size continues".
         *  - each byte afterwards: low seven bits are size continuation,
         *    with the high bit being "size continues"
         */
        int encode_in_pack_object_header(unsigned char *hdr, int hdr_len,
        				 enum object_type type, uintmax_t size)
        {
        	int n = 1;
        	unsigned char c;
        	if (type &lt; OBJ_COMMIT || type &gt; OBJ_REF_DELTA)
        		die("bad type %d", type);
        	c = (type &lt;&lt; 4) | (size &amp; 15);
        	size &gt;&gt;= 4;
        	while (size) {
        		if (n == hdr_len)
        			die("object size is too enormous to format");
        		*hdr++ = c | 0x80;
        		c = size &amp; 0x7f;
        		size &gt;&gt;= 7;
        		n++;
        	}
        	*hdr = c;
        	return n;
        }
        struct hashfile *create_tmp_packfile(char **pack_tmp_name)
        {
        	struct strbuf tmpname = STRBUF_INIT;
        	int fd;
        	fd = odb_mkstemp(&amp;tmpname, "pack/tmp_pack_XXXXXX");
        	*pack_tmp_name = strbuf_detach(&amp;tmpname, NULL);
        	return hashfd(fd, *pack_tmp_name);
        }
        void finish_tmp_packfile(struct strbuf *name_buffer,
        			 const char *pack_tmp_name,
        			 struct pack_idx_entry **written_list,
        			 uint32_t nr_written,
        			 struct pack_idx_option *pack_idx_opts,
        			 unsigned char sha1[])
        {
        	const char *idx_tmp_name;
        	int basename_len = name_buffer-&gt;len;
        	if (adjust_shared_perm(pack_tmp_name))
        		die_errno("unable to make temporary pack file readable");
        	idx_tmp_name = write_idx_file(NULL, written_list, nr_written,
        				      pack_idx_opts, sha1);
        	if (adjust_shared_perm(idx_tmp_name))
        		die_errno("unable to make temporary index file readable");
        	strbuf_addf(name_buffer, "%s.pack", sha1_to_hex(sha1));
        	if (rename(pack_tmp_name, name_buffer-&gt;buf))
        		die_errno("unable to rename temporary pack file");
        	strbuf_setlen(name_buffer, basename_len);
        	strbuf_addf(name_buffer, "%s.idx", sha1_to_hex(sha1));
        	if (rename(idx_tmp_name, name_buffer-&gt;buf))
        		die_errno("unable to rename temporary index file");
        	strbuf_setlen(name_buffer, basename_len);
        	free((void *)idx_tmp_name);
        }
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
