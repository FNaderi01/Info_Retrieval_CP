        About
            Branching and Merging
            Small and Fast
            Distributed
            Data Assurance
            Staging Area
            Free and Open Source
            Trademark
        Documentation
            Reference
            Book
            Videos
            External Links
        Downloads
            GUI Clients
            Logos
        Community
This book is available in
  English.
  Full translation available in
    български език,
    Deutsch,
    Español,
    Français,
    Ελληνικά,
    日本語,
    한국어,
    Nederlands,
    Русский,
    Slovenščina,
    Tagalog,
    Українська
    简体中文,
  Partial translations available in
    Čeština,
    Македонски,
    Polski,
    Српски,
    Ўзбекча,
    繁體中文,
  Translations started for
    azərbaycan dili,
    Беларуская,
    فارسی,
    Indonesian,
    Italiano,
    Bahasa Melayu,
    Português (Brasil),
    Português (Portugal),
    Svenska,
    Türkçe.
The source of this book is  hosted on GitHub.
Patches, suggestions and comments are welcome.
  Chapters ▾
  1. Введение
          1.1
          О системе контроля версий 
          1.2
          Краткая история Git 
          1.3
          Основы Git 
          1.4
          Командная строка 
          1.5
          Установка Git 
          1.6
          Первоначальная настройка Git 
          1.7
          Как получить помощь? 
          1.8
          Заключение 
  2. Основы Git
          2.1
          Создание Git-репозитория 
          2.2
          Запись изменений в репозиторий 
          2.3
          Просмотр истории коммитов 
          2.4
          Операции отмены 
          2.5
          Работа с удалёнными репозиториями 
          2.6
          Работа с метками 
          2.7
          Псевдонимы в Git 
          2.8
          Заключение 
  3. Ветвление в Git
          3.1
          О ветвлении в двух словах 
          3.2
          Основы ветвления и слияния 
          3.3
          Управление ветками 
          3.4
          Работа с ветками 
          3.5
          Удалённые ветки 
          3.6
          Перебазирование 
          3.7
          Заключение 
  4. Git на сервере
          4.1
          Протоколы 
          4.2
          Установка Git на сервер 
          4.3
          Генерация открытого SSH ключа 
          4.4
          Настраиваем сервер 
          4.5
          Git-демон 
          4.6
          Умный HTTP 
          4.7
          GitWeb 
          4.8
          GitLab 
          4.9
          Git-хостинг 
          4.10
          Заключение 
  5. Распределенный Git
          5.1
          Распределенный рабочий процесс 
          5.2
          Участие в проекте 
          5.3
          Сопровождение проекта 
          5.4
          Заключение 
  6. GitHub
          6.1
          Настройка и конфигурация учетной записи 
          6.2
          Внесение собственного вклада в проекты 
          6.3
          Сопровождение проекта 
          6.4
          Управление организацией 
          6.5
          Scripting GitHub 
          6.6
          Заключение 
  7. Инструменты Git
          7.1
          Выбор ревизии 
          7.2
          Интерактивное индексирование 
          7.3
          Прибережение и очистка 
          7.4
          Подпись результатов вашей работы 
          7.5
          Поиск 
          7.6
          Исправление истории 
          7.7
          Раскрытие тайн reset 
          7.8
          Продвинутое слияние 
          7.9
          Rerere 
          7.10
          Обнаружение ошибок с помощью Git 
          7.11
          Подмодули 
          7.12
          Создание пакетов 
          7.13
          Замена 
          7.14
          Хранилище учётных данных 
          7.15
          Заключение 
  8. Настройка Git
          8.1
          Конфигурация Git 
          8.2
          Атрибуты Git 
          8.3
          Хуки в Git 
          8.4
          Пример принудительной политики Git 
          8.5
          Заключение 
  9. Git и другие системы контроля версий
          9.1
          Git как клиент 
          9.2
          Миграция на Git 
          9.3
          Заключение 
  10. Git изнутри
          10.1
          Сантехника и Фарфор 
          10.2
          Объекты Git 
          10.3
          Ссылки в Git 
          10.4
          Pack-файлы 
          10.5
          Спецификации ссылок 
          10.6
          Протоколы передачи данных 
          10.7
          Обслуживание репозитория и восстановление данных 
          10.8
          Переменные окружения 
          10.9
          Заключение 
  A1. Appendix A: Git в других окружениях
          A1.1
          Графические интерфейсы 
          A1.2
          Git в Visual Studio 
          A1.3
          Git в Visual Studio Code 
          A1.4
          Git в Eclipse 
          A1.5
          Git в IntelliJ / PyCharm / WebStorm / PhpStorm / RubyMine 
          A1.6
          Git в Sublime Text 
          A1.7
          Git в Bash 
          A1.8
          Git в Zsh 
          A1.9
          Git в Powershell 
          A1.10
          Заключение 
  A2. Appendix B: Встраивание Git в ваши приложения
          A2.1
          Git из командной строки 
          A2.2
          Libgit2 
          A2.3
          JGit 
          A2.4
          go-git 
          A2.5
          Dulwich 
  A3. Appendix C: Команды Git
          A3.1
          Настройка и конфигурация 
          A3.2
          Клонирование и создание репозиториев 
          A3.3
          Основные команды 
          A3.4
          Ветвление и слияния 
          A3.5
          Совместная работа и обновление проектов 
          A3.6
          Осмотр и сравнение 
          A3.7
          Отладка 
          A3.8
          Внесение исправлений 
          A3.9
          Работа с помощью электронной почты 
          A3.10
          Внешние системы 
          A3.11
          Администрирование 
          A3.12
          Низкоуровневые команды 
      2nd Edition
    10.1 Git изнутри - Сантехника и Фарфор
  Вы могли прочитать почти всю книгу перед тем, как приступить к этой главе, а могли только часть — в любом случае в данной главе рассматриваются внутренние процессы Git и особенности его реализации.
На наш взгляд, изучение этого материала является основой понимания того, насколько Git полезный и мощный инструмент, однако, некоторые утверждают, что изложение этого материала может сбить новичков с толку и оказаться для них неоправданно сложным.
Именно поэтому глава отнесена в самый конец книги, так что вы можете начать читать её раньше или позже по ходу обучения.
Мы оставляем выбор за вами.Раз уж вы тут, приступим.
Во-первых, напомню, что Git — это, по сути, контентно-адресуемая файловая система с пользовательским интерфейсом системы контроля версий поверх неё.
Довольно скоро станет понятнее, что это значит.На заре развития Git (примерно до версии 1.5) интерфейс был значительно сложнее, поскольку был больше похож на интерфейс доступа к файловой системе, чем на законченную систему контроля версий.
За последние годы, интерфейс значительно очищен и упрощен до уровня аналогов; тем не менее, сохраняется стереотип о том, что интерфейс у Git чересчур сложен и труден для изучения.Контентно-адресуемая файловая система — основа Git, невероятно крута, именно её мы рассмотрим в этой главе в первую очередь; затем вы узнаете о транспортных механизмах и инструментах обслуживания репозитория, с которыми возможно вам придётся столкнуться.
Сантехника и Фарфор
В этой книге было описано, как пользоваться Git, применяя примерно три десятка команд, таких как checkout, branch, remote и так далее.
Но так как сначала Git был скорее инструментарием для создания системы контроля версий, чем самой СКВ, удобной для пользователей, то в нём полно команд, выполняющих низкоуровневые операции, которые спроектированы так, чтобы их можно было использовать объединив в цепочку в стиле UNIX, а также использовать в скриптах.
Эти команды, как правило, называют служебными ("plumbing" — трубопровод), а ориентированные на пользователя называют пользовательскими ("porcelain" — фарфор).
Первые девять глав книги были посвящены в основном пользовательским командам.
В данной главе рассматриваются именно низкоуровневые служебные команды, дающие контроль над внутренними процессами Git и показывающие, как он работает и почему он работает так, а не иначе.
Предполагается, что данные команды не будут использоваться напрямую из командной строки, а будут служить в качестве строительных блоков для новых команд и пользовательских скриптов.
Когда вы выполняете git init в новой или существовавшей ранее директории, Git создаёт подкаталог .git, в котором располагается почти всё, чем он манипулирует.
Если требуется выполнить резервное копирование или клонирование репозитория, достаточно скопировать лишь этот каталог, чтобы получить почти всё необходимое.
Данная глава почти полностью посвящена его содержимому.
Вот так выглядит только что созданная директория .git:
$ ls -F1
config
description
HEAD
hooks/
info/
objects/
refs/
В зависимости от используемой версии Git, здесь могут присутствовать и другие файлы, но по умолчанию команда git init создаёт именно такое содержимое в директории .git.
Файл description используется только программой GitWeb, не обращайте на него внимание.
Файл config содержит специфичные для этого репозитория конфигурационные параметры, а в директории info расположен файл с глобальными настройкам игнорирования файлов  — он позволяет исключить файлы, которые вы не хотите помещать в .gitignore.
В директории hooks располагаются клиентские и серверные хуки, подробно рассмотренные в главе Хуки в Git.
Итак, осталось четыре важных элемента: файлы HEAD и index (ещё не созданный) и директории objects и refs.
Это ключевые элементы Git.
В директории objects находится база данных объектов Git; в refs — ссылки на объекты коммитов в этой базе (ветки, тэги и другие); файл HEAD указывает на текущую ветку, a в файле index хранится содержимое индекса.
Далее мы детально рассмотрим эти элементы, чтобы понять как работает Git.
prev | next
    About this site
    Patches, suggestions, and comments are welcome.
    Git is a member of Software Freedom Conservancy
