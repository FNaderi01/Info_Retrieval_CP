      Skip to content
                Sign up
                    Why GitHub?
                    Features →
                      Code review
                      Project management
                      Integrations
                      Actions
                      Packages
                      Security
                      Team management
                      Hosting
                      Mobile
                      Customer stories →
                      Security →
                Team
                Enterprise
                    Explore
                      Explore GitHub →
                    Learn &amp; contribute
                      Topics
                        Collections
                      Trending
                      Learning Lab
                      Open source guides
                    Connect with others
                      Events
                      Community forum
                      GitHub Education
                      GitHub Stars program
                Marketplace
                    Pricing
                    Plans →
                      Compare plans
                      Contact Sales
                      Nonprofit →
                      Education →
     -->
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
    No suggested jump to results
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
        In this repository
        All GitHub
      ↵
      Jump to
      ↵
          Sign in
              Sign up
      {{ message }}
      newren
    /
    git
    forked from git/git
    Watch
      1
      Star
      1
          Fork
        20k
            Code
            Pull requests
              0
            Actions
            Projects
              0
            Security
            Insights
            More
                    Code
                    Pull requests
                    Actions
                    Projects
                    Security
                    Insights
    Permalink
          Dismiss
        Join GitHub today
        GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
        Sign up
      master
        git/tree-walk.h
        Go to file
                Go to file
                T
                  Go to line
                  L
                Copy path
          Cannot retrieve contributors at this time
      101 lines (82 sloc)
    3.01 KB
      Raw
        Blame
        #ifndef TREE_WALK_H
        #define TREE_WALK_H
        #include "cache.h"
        struct name_entry {
        	struct object_id oid;
        	const char *path;
        	int pathlen;
        	unsigned int mode;
        };
        struct tree_desc {
        	const void *buffer;
        	struct name_entry entry;
        	unsigned int size;
        };
        static inline const struct object_id *tree_entry_extract(struct tree_desc *desc, const char **pathp, unsigned short *modep)
        {
        	*pathp = desc-&gt;entry.path;
        	*modep = desc-&gt;entry.mode;
        	return &amp;desc-&gt;entry.oid;
        }
        static inline int tree_entry_len(const struct name_entry *ne)
        {
        	return ne-&gt;pathlen;
        }
        /*
         * The _gently versions of these functions warn and return false on a
         * corrupt tree entry rather than dying,
         */
        void update_tree_entry(struct tree_desc *);
        int update_tree_entry_gently(struct tree_desc *);
        void init_tree_desc(struct tree_desc *desc, const void *buf, unsigned long size);
        int init_tree_desc_gently(struct tree_desc *desc, const void *buf, unsigned long size);
        /*
         * Helper function that does both tree_entry_extract() and update_tree_entry()
         * and returns true for success
         */
        int tree_entry(struct tree_desc *, struct name_entry *);
        int tree_entry_gently(struct tree_desc *, struct name_entry *);
        void *fill_tree_descriptor(struct repository *r,
        			   struct tree_desc *desc,
        			   const struct object_id *oid);
        struct traverse_info;
        typedef int (*traverse_callback_t)(int n, unsigned long mask, unsigned long dirmask, struct name_entry *entry, struct traverse_info *);
        int traverse_trees(struct index_state *istate, int n, struct tree_desc *t, struct traverse_info *info);
        enum get_oid_result get_tree_entry_follow_symlinks(struct repository *r, struct object_id *tree_oid, const char *name, struct object_id *result, struct strbuf *result_path, unsigned short *mode);
        struct traverse_info {
        	const char *traverse_path;
        	struct traverse_info *prev;
        	const char *name;
        	size_t namelen;
        	unsigned mode;
        	size_t pathlen;
        	struct pathspec *pathspec;
        	unsigned long df_conflicts;
        	traverse_callback_t fn;
        	void *data;
        	int show_all_errors;
        };
        int get_tree_entry(struct repository *, const struct object_id *, const char *, struct object_id *, unsigned short *);
        char *make_traverse_path(char *path, size_t pathlen, const struct traverse_info *info,
        			 const char *name, size_t namelen);
        void strbuf_make_traverse_path(struct strbuf *out,
        			       const struct traverse_info *info,
        			       const char *name, size_t namelen);
        void setup_traverse_info(struct traverse_info *info, const char *base);
        static inline size_t traverse_path_len(const struct traverse_info *info,
        				       size_t namelen)
        {
        	return st_add(info-&gt;pathlen, namelen);
        }
        /* in general, positive means "kind of interesting" */
        enum interesting {
        	all_entries_not_interesting = -1, /* no, and no subsequent entries will be either */
        	entry_not_interesting = 0,
        	entry_interesting = 1,
        	all_entries_interesting = 2 /* yes, and all subsequent entries will be */
        };
        enum interesting tree_entry_interesting(struct index_state *istate,
        					const struct name_entry *,
        					struct strbuf *, int,
        					const struct pathspec *ps);
        #endif
            Copy lines
            Copy permalink
        View git blame
       -->
        Go
        © 2020 GitHub, Inc.
          Terms
          Privacy
  Cookie Preferences
          Security
          Status
          Help
          Contact GitHub
          Pricing
        API
        Training
          Blog
          About
    You can’t perform that action at this time.
    You signed in with another tab or window. Reload to refresh your session.
    You signed out in another tab or window. Reload to refresh your session.
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              Learn more.
              Accept
              Reject
  We use optional third-party analytics cookies to understand how you use GitHub.com so we can build better products.
              You can always update your selection by clicking Cookie Preferences at the bottom of the page.
              For more information, see our Privacy Statement.
              Essential cookies
              We use essential cookies to perform essential website functions, e.g. they're used to log you in. 
                Learn more
              Always active
              Analytics cookies
              We use analytics cookies to understand how you use our websites so we can make them better, e.g. they're used to gather information about the pages you visit and how many clicks you need to accomplish a task. 
                Learn more
                Accept
                Reject
            Save preferences
